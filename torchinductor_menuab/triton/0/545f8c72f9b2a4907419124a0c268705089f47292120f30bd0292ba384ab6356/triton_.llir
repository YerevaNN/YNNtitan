; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = shl i32 %12, 1, !dbg !11
  %15 = and i32 %14, 510, !dbg !11
  %16 = shl i32 %11, 11, !dbg !12
  br label %17, !dbg !13

17:                                               ; preds = %10, %17
  %18 = phi float [ 0.000000e+00, %10 ], [ %63, %17 ]
  %19 = phi float [ 0.000000e+00, %10 ], [ %64, %17 ]
  %20 = phi i32 [ 0, %10 ], [ %65, %17 ]
  %21 = or disjoint i32 %20, %15, !dbg !14
  %22 = or disjoint i32 %21, %16, !dbg !15
  %23 = sext i32 %22 to i64, !dbg !16
  %24 = getelementptr i16, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 true, i32 0, i1 true) #3, !dbg !17
  %26 = trunc i32 %25 to i16, !dbg !17
  %extelt.offset7 = lshr i32 %25, 16, !dbg !17
  %27 = trunc nuw i32 %extelt.offset7 to i16, !dbg !17
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #3, !dbg !18
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #3, !dbg !18
  %30 = getelementptr i16, ptr addrspace(1) %1, i64 %23, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true) #3, !dbg !20
  %32 = trunc i32 %31 to i16, !dbg !20
  %extelt.offset8 = lshr i32 %31, 16, !dbg !20
  %33 = trunc nuw i32 %extelt.offset8 to i16, !dbg !20
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #3, !dbg !21
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #3, !dbg !21
  %36 = zext nneg i32 %21 to i64, !dbg !22
  %37 = getelementptr i16, ptr addrspace(1) %2, i64 %36, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 true, i32 0, i1 true) #3, !dbg !23
  %39 = trunc i32 %38 to i16, !dbg !23
  %extelt.offset9 = lshr i32 %38, 16, !dbg !23
  %40 = trunc nuw i32 %extelt.offset9 to i16, !dbg !23
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #3, !dbg !24
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #3, !dbg !24
  %43 = getelementptr i16, ptr addrspace(1) %3, i64 %23, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 true, i32 0, i1 true) #3, !dbg !26
  %45 = trunc i32 %44 to i16, !dbg !26
  %extelt.offset10 = lshr i32 %44, 16, !dbg !26
  %46 = trunc nuw i32 %extelt.offset10 to i16, !dbg !26
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #3, !dbg !27
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #3, !dbg !27
  %49 = getelementptr i16, ptr addrspace(1) %4, i64 %23, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 true, i32 0, i1 true) #3, !dbg !29
  %51 = trunc i32 %50 to i16, !dbg !29
  %extelt.offset11 = lshr i32 %50, 16, !dbg !29
  %52 = trunc nuw i32 %extelt.offset11 to i16, !dbg !29
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #3, !dbg !30
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #3, !dbg !30
  %55 = fadd float %28, %34, !dbg !31
  %56 = fadd float %29, %35, !dbg !31
  %57 = fmul float %55, %41, !dbg !32
  %58 = fmul float %56, %42, !dbg !32
  %59 = fadd float %47, %53, !dbg !33
  %60 = fadd float %48, %54, !dbg !33
  %61 = fmul float %57, %59, !dbg !34
  %62 = fmul float %58, %60, !dbg !34
  %63 = fadd float %18, %61, !dbg !35
  %64 = fadd float %19, %62, !dbg !35
  %65 = add nuw nsw i32 %20, 512, !dbg !13
  %66 = icmp ult i32 %20, 1536, !dbg !13
  br i1 %66, label %17, label %67, !dbg !13

67:                                               ; preds = %17
  %68 = lshr i32 %12, 5, !dbg !11
  %69 = fadd float %63, %64, !dbg !36
  %70 = bitcast float %69 to i32, !dbg !41
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !41
  %72 = bitcast i32 %71 to float, !dbg !41
  %73 = fadd float %69, %72, !dbg !36
  %74 = bitcast float %73 to i32, !dbg !41
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !41
  %76 = bitcast i32 %75 to float, !dbg !41
  %77 = fadd float %73, %76, !dbg !36
  %78 = bitcast float %77 to i32, !dbg !41
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !41
  %80 = bitcast i32 %79 to float, !dbg !41
  %81 = fadd float %77, %80, !dbg !36
  %82 = bitcast float %81 to i32, !dbg !41
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !41
  %84 = bitcast i32 %83 to float, !dbg !41
  %85 = fadd float %81, %84, !dbg !36
  %86 = bitcast float %85 to i32, !dbg !41
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !41
  %88 = bitcast i32 %87 to float, !dbg !41
  %89 = fadd float %85, %88, !dbg !36
  %90 = icmp eq i32 %13, 0, !dbg !41
  %91 = and i32 %68, 7, !dbg !41
  %92 = zext nneg i32 %91 to i64, !dbg !41
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i64 %92, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, float %89, i1 %90) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %94 = icmp slt i32 %12, 8, !dbg !41
  %95 = sext i32 %12 to i64, !dbg !41
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i64 %95, !dbg !41
  %97 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %96, i1 %94) #3, !dbg !41
  %98 = bitcast float %97 to i32, !dbg !41
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 4, i32 31), !dbg !41
  %100 = bitcast i32 %99 to float, !dbg !41
  %101 = fadd float %97, %100, !dbg !36
  %102 = bitcast float %101 to i32, !dbg !41
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !41
  %104 = bitcast i32 %103 to float, !dbg !41
  %105 = fadd float %101, %104, !dbg !36
  %106 = bitcast float %105 to i32, !dbg !41
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !41
  %108 = bitcast i32 %107 to float, !dbg !41
  %109 = fadd float %105, %108, !dbg !36
  %110 = and i32 %12, 7, !dbg !41
  %111 = icmp eq i32 %110, 0, !dbg !41
  %112 = and i1 %94, %111, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, float %109, i1 %112) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %113 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %114 = sext i32 %11 to i64, !dbg !42
  %115 = getelementptr float, ptr addrspace(1) %6, i64 %114, !dbg !42
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #3, !dbg !43
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #3, !dbg !43
  %118 = bitcast i32 %117 to float, !dbg !43
  %119 = fmul float %113, -5.000000e-01, !dbg !44
  %120 = fmul float %118, %118, !dbg !45
  %121 = fmul float %120, %118, !dbg !46
  %122 = fmul float %119, %121, !dbg !47
  %123 = fmul float %122, 0x3F40000000000000, !dbg !48
  %124 = insertelement <2 x float> poison, float %118, i64 0, !dbg !49
  %125 = insertelement <2 x float> %124, float %123, i64 1, !dbg !49
  br label %126, !dbg !50

126:                                              ; preds = %67, %126
  %127 = phi i32 [ 0, %67 ], [ %196, %126 ]
  %128 = or disjoint i32 %127, %15, !dbg !51
  %129 = or disjoint i32 %128, %16, !dbg !52
  %130 = sext i32 %129 to i64, !dbg !53
  %131 = getelementptr i16, ptr addrspace(1) %5, i64 %130, !dbg !53
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 true, i32 0, i1 true) #3, !dbg !54
  %133 = trunc i32 %132 to i16, !dbg !54
  %extelt.offset = lshr i32 %132, 16, !dbg !54
  %134 = trunc nuw i32 %extelt.offset to i16, !dbg !54
  %135 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %133) #3, !dbg !55
  %136 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %134) #3, !dbg !55
  %137 = getelementptr i16, ptr addrspace(1) %0, i64 %130, !dbg !56
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 true, i32 0, i1 true) #3, !dbg !57
  %139 = trunc i32 %138 to i16, !dbg !57
  %extelt.offset2 = lshr i32 %138, 16, !dbg !57
  %140 = trunc nuw i32 %extelt.offset2 to i16, !dbg !57
  %141 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %139) #3, !dbg !58
  %142 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %140) #3, !dbg !58
  %143 = getelementptr i16, ptr addrspace(1) %1, i64 %130, !dbg !59
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 true, i32 0, i1 true) #3, !dbg !60
  %145 = trunc i32 %144 to i16, !dbg !60
  %extelt.offset3 = lshr i32 %144, 16, !dbg !60
  %146 = trunc nuw i32 %extelt.offset3 to i16, !dbg !60
  %147 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %145) #3, !dbg !61
  %148 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %146) #3, !dbg !61
  %149 = zext nneg i32 %128 to i64, !dbg !62
  %150 = getelementptr i16, ptr addrspace(1) %2, i64 %149, !dbg !62
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 true, i32 0, i1 true) #3, !dbg !63
  %152 = trunc i32 %151 to i16, !dbg !63
  %extelt.offset4 = lshr i32 %151, 16, !dbg !63
  %153 = trunc nuw i32 %extelt.offset4 to i16, !dbg !63
  %154 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %152) #3, !dbg !64
  %155 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %153) #3, !dbg !64
  %156 = getelementptr i16, ptr addrspace(1) %3, i64 %130, !dbg !65
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 true, i32 0, i1 true) #3, !dbg !66
  %158 = trunc i32 %157 to i16, !dbg !66
  %extelt.offset5 = lshr i32 %157, 16, !dbg !66
  %159 = trunc nuw i32 %extelt.offset5 to i16, !dbg !66
  %160 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %158) #3, !dbg !67
  %161 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %159) #3, !dbg !67
  %162 = getelementptr i16, ptr addrspace(1) %4, i64 %130, !dbg !68
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 true, i32 0, i1 true) #3, !dbg !69
  %164 = trunc i32 %163 to i16, !dbg !69
  %extelt.offset6 = lshr i32 %163, 16, !dbg !69
  %165 = trunc nuw i32 %extelt.offset6 to i16, !dbg !69
  %166 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %164) #3, !dbg !70
  %167 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %165) #3, !dbg !70
  %168 = insertelement <2 x float> poison, float %141, i64 0, !dbg !71
  %169 = insertelement <2 x float> %168, float %160, i64 1, !dbg !71
  %170 = insertelement <2 x float> poison, float %147, i64 0, !dbg !71
  %171 = insertelement <2 x float> %170, float %166, i64 1, !dbg !71
  %172 = fadd <2 x float> %169, %171, !dbg !71
  %173 = insertelement <2 x float> <float poison, float 2.000000e+00>, float %154, i64 0, !dbg !72
  %174 = fmul <2 x float> %172, %173, !dbg !72
  %175 = fmul <2 x float> %174, %125, !dbg !49
  %176 = insertelement <2 x float> poison, float %142, i64 0, !dbg !71
  %177 = insertelement <2 x float> %176, float %161, i64 1, !dbg !71
  %178 = insertelement <2 x float> poison, float %148, i64 0, !dbg !71
  %179 = insertelement <2 x float> %178, float %167, i64 1, !dbg !71
  %180 = fadd <2 x float> %177, %179, !dbg !71
  %181 = insertelement <2 x float> <float poison, float 2.000000e+00>, float %155, i64 0, !dbg !72
  %182 = fmul <2 x float> %180, %181, !dbg !72
  %183 = fmul <2 x float> %182, %125, !dbg !49
  %shift = shufflevector <2 x float> %175, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !73
  %184 = fadd <2 x float> %175, %shift, !dbg !73
  %185 = extractelement <2 x float> %184, i64 0, !dbg !73
  %shift15 = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !73
  %186 = fadd <2 x float> %183, %shift15, !dbg !73
  %187 = extractelement <2 x float> %186, i64 0, !dbg !73
  %188 = fadd float %135, %185, !dbg !74
  %189 = fadd float %136, %187, !dbg !74
  %190 = getelementptr i16, ptr addrspace(1) %7, i64 %130, !dbg !75
  %191 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %188) #3, !dbg !76
  %192 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %189) #3, !dbg !76
  %193 = insertelement <2 x i16> poison, i16 %191, i64 0, !dbg !76
  %194 = insertelement <2 x i16> %193, i16 %192, i64 1, !dbg !76
  %195 = bitcast <2 x i16> %194 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %190, i1 true) #3, !dbg !76
  %196 = add nuw nsw i32 %127, 512, !dbg !50
  %197 = icmp ult i32 %127, 1536, !dbg !50
  br i1 %197, label %126, label %198, !dbg !50

198:                                              ; preds = %126
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6qtfaljmzhw3gramwm6y7y4rityckbdyiajqicgdf4npgjou4un.py", directory: "/auto/home/menuab/code/YNNtitan/torchinductor_menuab/6q")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 27, column: 36, scope: !7)
!14 = !DILocation(line: 28, column: 27, scope: !7)
!15 = !DILocation(line: 31, column: 40, scope: !7)
!16 = !DILocation(line: 31, column: 34, scope: !7)
!17 = !DILocation(line: 31, column: 51, scope: !7)
!18 = !DILocation(line: 31, column: 102, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 51, scope: !7)
!21 = !DILocation(line: 32, column: 102, scope: !7)
!22 = !DILocation(line: 33, column: 34, scope: !7)
!23 = !DILocation(line: 33, column: 39, scope: !7)
!24 = !DILocation(line: 33, column: 90, scope: !7)
!25 = !DILocation(line: 34, column: 34, scope: !7)
!26 = !DILocation(line: 34, column: 51, scope: !7)
!27 = !DILocation(line: 34, column: 102, scope: !7)
!28 = !DILocation(line: 35, column: 34, scope: !7)
!29 = !DILocation(line: 35, column: 51, scope: !7)
!30 = !DILocation(line: 35, column: 102, scope: !7)
!31 = !DILocation(line: 36, column: 22, scope: !7)
!32 = !DILocation(line: 37, column: 22, scope: !7)
!33 = !DILocation(line: 39, column: 22, scope: !7)
!34 = !DILocation(line: 41, column: 23, scope: !7)
!35 = !DILocation(line: 43, column: 25, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/auto/home/menuab/miniforge3/envs/titan/lib/python3.10/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!40 = !DILocation(line: 45, column: 27, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 46, column: 31, scope: !7)
!43 = !DILocation(line: 46, column: 36, scope: !7)
!44 = !DILocation(line: 62, column: 24, scope: !7)
!45 = !DILocation(line: 63, column: 24, scope: !7)
!46 = !DILocation(line: 64, column: 24, scope: !7)
!47 = !DILocation(line: 65, column: 24, scope: !7)
!48 = !DILocation(line: 67, column: 24, scope: !7)
!49 = !DILocation(line: 60, column: 24, scope: !7)
!50 = !DILocation(line: 47, column: 36, scope: !7)
!51 = !DILocation(line: 48, column: 27, scope: !7)
!52 = !DILocation(line: 51, column: 41, scope: !7)
!53 = !DILocation(line: 51, column: 35, scope: !7)
!54 = !DILocation(line: 51, column: 52, scope: !7)
!55 = !DILocation(line: 51, column: 104, scope: !7)
!56 = !DILocation(line: 52, column: 35, scope: !7)
!57 = !DILocation(line: 52, column: 52, scope: !7)
!58 = !DILocation(line: 52, column: 104, scope: !7)
!59 = !DILocation(line: 53, column: 35, scope: !7)
!60 = !DILocation(line: 53, column: 52, scope: !7)
!61 = !DILocation(line: 53, column: 104, scope: !7)
!62 = !DILocation(line: 54, column: 35, scope: !7)
!63 = !DILocation(line: 54, column: 40, scope: !7)
!64 = !DILocation(line: 54, column: 91, scope: !7)
!65 = !DILocation(line: 55, column: 35, scope: !7)
!66 = !DILocation(line: 55, column: 52, scope: !7)
!67 = !DILocation(line: 55, column: 104, scope: !7)
!68 = !DILocation(line: 56, column: 35, scope: !7)
!69 = !DILocation(line: 56, column: 52, scope: !7)
!70 = !DILocation(line: 56, column: 104, scope: !7)
!71 = !DILocation(line: 57, column: 24, scope: !7)
!72 = !DILocation(line: 58, column: 24, scope: !7)
!73 = !DILocation(line: 73, column: 24, scope: !7)
!74 = !DILocation(line: 75, column: 24, scope: !7)
!75 = !DILocation(line: 76, column: 29, scope: !7)
!76 = !DILocation(line: 76, column: 53, scope: !7)
!77 = !DILocation(line: 47, column: 4, scope: !7)
