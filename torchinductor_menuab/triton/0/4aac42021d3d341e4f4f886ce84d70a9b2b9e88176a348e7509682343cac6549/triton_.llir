; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 6, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = and i32 %16, 31, !dbg !12
  %18 = shl i32 %16, 2, !dbg !12
  %19 = and i32 %18, 4, !dbg !12
  %20 = and i32 %18, 60, !dbg !12
  %21 = lshr i32 %16, 5, !dbg !12
  %22 = lshr i32 %16, 1, !dbg !12
  %23 = and i32 %22, 63, !dbg !12
  %24 = or disjoint i32 %15, %20, !dbg !13
  %25 = or disjoint i32 %15, %23, !dbg !13
  %26 = lshr i32 %16, 4, !dbg !14
  %27 = and i32 %26, 7, !dbg !14
  %.frozen = freeze i32 %24
  %28 = sdiv i32 %.frozen, 2048, !dbg !15
  %29 = mul i32 %28, 2048
  %.decomposed = sub i32 %.frozen, %29
  %30 = sdiv i32 %25, 2048, !dbg !15
  %31 = shl i32 %28, 18, !dbg !16
  %32 = shl nsw i32 %30, 7, !dbg !17
  %33 = add i32 %31, %.decomposed
  %34 = and i32 %21, 3
  %35 = lshr i32 %17, 4
  %36 = shl nuw nsw i32 %34, 1
  %37 = or disjoint i32 %36, %35
  %38 = mul nuw nsw i32 %20, 12
  %39 = or disjoint i32 %37, %38
  %40 = zext nneg i32 %39 to i64
  %41 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %40
  %42 = or disjoint i32 %38, 12
  %43 = add nuw nsw i32 %42, %37
  %44 = zext nneg i32 %43 to i64
  %45 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %44
  %46 = add nuw nsw i32 %38, 24
  %47 = or disjoint i32 %46, %37
  %48 = zext nneg i32 %47 to i64
  %49 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %48
  %50 = add nuw nsw i32 %38, 36
  %51 = add nuw nsw i32 %50, %37
  %52 = zext nneg i32 %51 to i64
  %53 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %52
  %54 = lshr i32 %17, 1
  %55 = shl nuw nsw i32 %34, 4
  %56 = or disjoint i32 %55, %54
  %57 = mul nuw nsw i32 %56, 12
  %58 = add nuw nsw i32 %57, %19
  %59 = zext nneg i32 %58 to i64
  %60 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %59
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %40
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i64 %44
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i64 %48
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i64 %52
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i64 %59
  %66 = getelementptr inbounds i8, ptr addrspace(3) %60, i64 2
  %67 = getelementptr inbounds i8, ptr addrspace(3) %60, i64 4
  %68 = getelementptr inbounds i8, ptr addrspace(3) %60, i64 6
  br label %69, !dbg !18

69:                                               ; preds = %13, %69
  %70 = phi i32 [ 0, %13 ], [ %237, %69 ]
  %71 = phi <8 x float> [ zeroinitializer, %13 ], [ %236, %69 ]
  %72 = or disjoint i32 %70, %19, !dbg !19
  %73 = or disjoint i32 %70, %27, !dbg !19
  %74 = shl nuw nsw i32 %73, 11, !dbg !20
  %75 = add i32 %33, %74, !dbg !21
  %76 = sext i32 %75 to i64, !dbg !22
  %77 = getelementptr i16, ptr addrspace(1) %0, i64 %76, !dbg !22
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %77, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !23
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !23
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !23
  %81 = trunc i32 %79 to i16, !dbg !23
  %extelt.offset = lshr i32 %79, 16, !dbg !23
  %82 = trunc nuw i32 %extelt.offset to i16, !dbg !23
  %83 = trunc i32 %80 to i16, !dbg !23
  %extelt.offset2 = lshr i32 %80, 16, !dbg !23
  %84 = trunc nuw i32 %extelt.offset2 to i16, !dbg !23
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #3, !dbg !24
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #3, !dbg !24
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #3, !dbg !24
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #3, !dbg !24
  %89 = getelementptr i16, ptr addrspace(1) %1, i64 %76, !dbg !25
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !26
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !26
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !26
  %93 = trunc i32 %91 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %91, 16, !dbg !26
  %94 = trunc nuw i32 %extelt.offset3 to i16, !dbg !26
  %95 = trunc i32 %92 to i16, !dbg !26
  %extelt.offset4 = lshr i32 %92, 16, !dbg !26
  %96 = trunc nuw i32 %extelt.offset4 to i16, !dbg !26
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #3, !dbg !27
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #3, !dbg !27
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #3, !dbg !27
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #3, !dbg !27
  %101 = getelementptr i16, ptr addrspace(1) %2, i64 %76, !dbg !28
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %101, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !29
  %103 = extractvalue { i32, i32 } %102, 0, !dbg !29
  %104 = extractvalue { i32, i32 } %102, 1, !dbg !29
  %105 = trunc i32 %103 to i16, !dbg !29
  %extelt.offset5 = lshr i32 %103, 16, !dbg !29
  %106 = trunc nuw i32 %extelt.offset5 to i16, !dbg !29
  %107 = trunc i32 %104 to i16, !dbg !29
  %extelt.offset6 = lshr i32 %104, 16, !dbg !29
  %108 = trunc nuw i32 %extelt.offset6 to i16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %109 = insertelement <1 x i16> poison, i16 %105, i64 0, !dbg !30
  store <1 x i16> %109, ptr addrspace(3) %41, align 2, !dbg !30
  %110 = insertelement <1 x i16> poison, i16 %106, i64 0, !dbg !30
  store <1 x i16> %110, ptr addrspace(3) %45, align 2, !dbg !30
  %111 = insertelement <1 x i16> poison, i16 %107, i64 0, !dbg !30
  store <1 x i16> %111, ptr addrspace(3) %49, align 2, !dbg !30
  %112 = insertelement <1 x i16> poison, i16 %108, i64 0, !dbg !30
  store <1 x i16> %112, ptr addrspace(3) %53, align 2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %113 = load i16, ptr addrspace(3) %60, align 8, !dbg !30
  %114 = load i16, ptr addrspace(3) %66, align 2, !dbg !30
  %115 = load i16, ptr addrspace(3) %67, align 4, !dbg !30
  %116 = load i16, ptr addrspace(3) %68, align 2, !dbg !30
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #3, !dbg !30
  %118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #3, !dbg !30
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %115) #3, !dbg !30
  %120 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %116) #3, !dbg !30
  %121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %105) #3, !dbg !30
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #3, !dbg !30
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #3, !dbg !30
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #3, !dbg !30
  %125 = getelementptr i16, ptr addrspace(1) %3, i64 %76, !dbg !31
  %126 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %125, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !32
  %127 = extractvalue { i32, i32 } %126, 0, !dbg !32
  %128 = extractvalue { i32, i32 } %126, 1, !dbg !32
  %129 = trunc i32 %127 to i16, !dbg !32
  %extelt.offset7 = lshr i32 %127, 16, !dbg !32
  %130 = trunc nuw i32 %extelt.offset7 to i16, !dbg !32
  %131 = trunc i32 %128 to i16, !dbg !32
  %extelt.offset8 = lshr i32 %128, 16, !dbg !32
  %132 = trunc nuw i32 %extelt.offset8 to i16, !dbg !32
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %129) #3, !dbg !33
  %134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %130) #3, !dbg !33
  %135 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %131) #3, !dbg !33
  %136 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %132) #3, !dbg !33
  %137 = add nuw nsw i32 %72, %32, !dbg !34
  %138 = sext i32 %137 to i64, !dbg !35
  %139 = getelementptr float, ptr addrspace(1) %4, i64 %138, !dbg !35
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !36
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !36
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !36
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !36
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !36
  %145 = getelementptr i16, ptr addrspace(1) %5, i64 %76, !dbg !37
  %146 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %145, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !38
  %147 = extractvalue { i32, i32 } %146, 0, !dbg !38
  %148 = extractvalue { i32, i32 } %146, 1, !dbg !38
  %149 = trunc i32 %147 to i16, !dbg !38
  %extelt.offset9 = lshr i32 %147, 16, !dbg !38
  %150 = trunc nuw i32 %extelt.offset9 to i16, !dbg !38
  %151 = trunc i32 %148 to i16, !dbg !38
  %extelt.offset10 = lshr i32 %148, 16, !dbg !38
  %152 = trunc nuw i32 %extelt.offset10 to i16, !dbg !38
  %153 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %149) #3, !dbg !39
  %154 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %150) #3, !dbg !39
  %155 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %151) #3, !dbg !39
  %156 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %152) #3, !dbg !39
  %157 = getelementptr i16, ptr addrspace(1) %6, i64 %76, !dbg !40
  %158 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %157, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !41
  %159 = extractvalue { i32, i32 } %158, 0, !dbg !41
  %160 = extractvalue { i32, i32 } %158, 1, !dbg !41
  %161 = trunc i32 %159 to i16, !dbg !41
  %extelt.offset11 = lshr i32 %159, 16, !dbg !41
  %162 = trunc nuw i32 %extelt.offset11 to i16, !dbg !41
  %163 = trunc i32 %160 to i16, !dbg !41
  %extelt.offset12 = lshr i32 %160, 16, !dbg !41
  %164 = trunc nuw i32 %extelt.offset12 to i16, !dbg !41
  %165 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %161) #3, !dbg !42
  %166 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %162) #3, !dbg !42
  %167 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %163) #3, !dbg !42
  %168 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %164) #3, !dbg !42
  %169 = getelementptr i16, ptr addrspace(1) %7, i64 %76, !dbg !43
  %170 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %169, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !44
  %171 = extractvalue { i32, i32 } %170, 0, !dbg !44
  %172 = extractvalue { i32, i32 } %170, 1, !dbg !44
  %173 = trunc i32 %171 to i16, !dbg !44
  %extelt.offset13 = lshr i32 %171, 16, !dbg !44
  %174 = trunc nuw i32 %extelt.offset13 to i16, !dbg !44
  %175 = trunc i32 %172 to i16, !dbg !44
  %extelt.offset14 = lshr i32 %172, 16, !dbg !44
  %176 = trunc nuw i32 %extelt.offset14 to i16, !dbg !44
  %177 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %173) #3, !dbg !45
  %178 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %174) #3, !dbg !45
  %179 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %175) #3, !dbg !45
  %180 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %176) #3, !dbg !45
  %181 = getelementptr float, ptr addrspace(1) %8, i64 %138, !dbg !46
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %181, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !47
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !47
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !47
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !47
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !47
  %187 = fadd float %85, %97, !dbg !48
  %188 = fadd float %86, %98, !dbg !48
  %189 = fadd float %87, %99, !dbg !48
  %190 = fadd float %88, %100, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %191 = insertelement <1 x float> poison, float %187, i64 0, !dbg !48
  store <1 x float> %191, ptr addrspace(3) %61, align 4, !dbg !48
  %192 = insertelement <1 x float> poison, float %188, i64 0, !dbg !48
  store <1 x float> %192, ptr addrspace(3) %62, align 4, !dbg !48
  %193 = insertelement <1 x float> poison, float %189, i64 0, !dbg !48
  store <1 x float> %193, ptr addrspace(3) %63, align 4, !dbg !48
  %194 = insertelement <1 x float> poison, float %190, i64 0, !dbg !48
  store <1 x float> %194, ptr addrspace(3) %64, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %195 = load <4 x float>, ptr addrspace(3) %65, align 16, !dbg !48
  %196 = fadd float %121, %133, !dbg !49
  %197 = fadd float %122, %134, !dbg !49
  %198 = fadd float %123, %135, !dbg !49
  %199 = fadd float %124, %136, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %200 = insertelement <1 x float> poison, float %196, i64 0, !dbg !49
  store <1 x float> %200, ptr addrspace(3) %61, align 4, !dbg !49
  %201 = insertelement <1 x float> poison, float %197, i64 0, !dbg !49
  store <1 x float> %201, ptr addrspace(3) %62, align 4, !dbg !49
  %202 = insertelement <1 x float> poison, float %198, i64 0, !dbg !49
  store <1 x float> %202, ptr addrspace(3) %63, align 4, !dbg !49
  %203 = insertelement <1 x float> poison, float %199, i64 0, !dbg !49
  store <1 x float> %203, ptr addrspace(3) %64, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %204 = load <4 x float>, ptr addrspace(3) %65, align 16, !dbg !49
  %205 = fadd float %153, %165, !dbg !50
  %206 = fadd float %154, %166, !dbg !50
  %207 = fadd float %155, %167, !dbg !50
  %208 = fadd float %156, %168, !dbg !50
  %209 = fadd float %205, %177, !dbg !51
  %210 = fadd float %206, %178, !dbg !51
  %211 = fadd float %207, %179, !dbg !51
  %212 = fadd float %208, %180, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %213 = insertelement <1 x float> poison, float %209, i64 0, !dbg !51
  store <1 x float> %213, ptr addrspace(3) %61, align 4, !dbg !51
  %214 = insertelement <1 x float> poison, float %210, i64 0, !dbg !51
  store <1 x float> %214, ptr addrspace(3) %62, align 4, !dbg !51
  %215 = insertelement <1 x float> poison, float %211, i64 0, !dbg !51
  store <1 x float> %215, ptr addrspace(3) %63, align 4, !dbg !51
  %216 = insertelement <1 x float> poison, float %212, i64 0, !dbg !51
  store <1 x float> %216, ptr addrspace(3) %64, align 4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %217 = load <4 x float>, ptr addrspace(3) %65, align 16, !dbg !51
  %218 = insertelement <8 x i32> poison, i32 %183, i64 0, !dbg !47
  %219 = insertelement <8 x i32> %218, i32 %184, i64 1, !dbg !47
  %220 = insertelement <8 x i32> %219, i32 %185, i64 2, !dbg !47
  %221 = insertelement <8 x i32> %220, i32 %186, i64 3, !dbg !47
  %222 = insertelement <8 x i32> %221, i32 %141, i64 4, !dbg !47
  %223 = insertelement <8 x i32> %222, i32 %142, i64 5, !dbg !47
  %224 = insertelement <8 x i32> %223, i32 %143, i64 6, !dbg !47
  %225 = insertelement <8 x i32> %224, i32 %144, i64 7, !dbg !47
  %226 = bitcast <8 x i32> %225 to <8 x float>, !dbg !47
  %227 = insertelement <8 x float> poison, float %117, i64 0, !dbg !52
  %228 = insertelement <8 x float> %227, float %118, i64 1, !dbg !52
  %229 = insertelement <8 x float> %228, float %119, i64 2, !dbg !52
  %230 = insertelement <8 x float> %229, float %120, i64 3, !dbg !52
  %231 = shufflevector <4 x float> %204, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !52
  %232 = shufflevector <8 x float> %230, <8 x float> %231, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !52
  %233 = fmul <8 x float> %232, %226, !dbg !52
  %234 = shufflevector <4 x float> %217, <4 x float> %195, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !53
  %235 = fmul <8 x float> %233, %234, !dbg !53
  %236 = fadd <8 x float> %71, %235, !dbg !54
  %237 = add nuw nsw i32 %70, 8, !dbg !18
  %238 = icmp ult i32 %70, 120, !dbg !18
  br i1 %238, label %69, label %239, !dbg !18

239:                                              ; preds = %69
  %240 = and i32 %16, 63, !dbg !12
  %241 = or disjoint i32 %15, %240, !dbg !13
  %shift = shufflevector <8 x float> %236, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !55
  %242 = fadd <8 x float> %236, %shift, !dbg !55
  %shift37 = shufflevector <8 x float> %236, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison, i32 poison>, !dbg !55
  %243 = fadd <8 x float> %shift37, %242, !dbg !55
  %shift38 = shufflevector <8 x float> %236, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison, i32 poison, i32 poison>, !dbg !55
  %244 = fadd <8 x float> %shift38, %243, !dbg !55
  %245 = extractelement <8 x float> %244, i64 4, !dbg !55
  %246 = bitcast float %245 to i32, !dbg !60
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 1, i32 31), !dbg !60
  %248 = bitcast i32 %247 to float, !dbg !60
  %249 = fadd float %245, %248, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %250 = shl nuw nsw i32 %21, 4, !dbg !61
  %251 = and i32 %250, 48, !dbg !61
  %252 = or disjoint i32 %251, %54, !dbg !61
  %253 = zext nneg i32 %252 to i64, !dbg !61
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i64 %253, !dbg !61
  %255 = insertelement <1 x float> poison, float %249, i64 0, !dbg !61
  store <1 x float> %255, ptr addrspace(3) %254, align 4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %256 = zext nneg i32 %240 to i64, !dbg !61
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i64 %256, !dbg !61
  %258 = load i32, ptr addrspace(3) %257, align 4, !dbg !61
  %259 = sext i32 %241 to i64, !dbg !62
  %260 = getelementptr float, ptr addrspace(1) %9, i64 %259, !dbg !62
  %261 = and i32 %16, 64, !dbg !63
  %262 = icmp eq i32 %261, 0, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %258, ptr addrspace(1) %260, i1 %262) #3, !dbg !63
  %shift39 = shufflevector <8 x float> %236, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !64
  %263 = fadd <8 x float> %236, %shift39, !dbg !64
  %shift40 = shufflevector <8 x float> %236, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !64
  %264 = fadd <8 x float> %shift40, %263, !dbg !64
  %shift41 = shufflevector <8 x float> %236, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !64
  %265 = fadd <8 x float> %shift41, %264, !dbg !64
  %266 = extractelement <8 x float> %265, i64 0, !dbg !64
  %267 = bitcast float %266 to i32, !dbg !66
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 1, i32 31), !dbg !66
  %269 = bitcast i32 %268 to float, !dbg !66
  %270 = fadd float %266, %269, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %271 = insertelement <1 x float> poison, float %270, i64 0, !dbg !67
  store <1 x float> %271, ptr addrspace(3) %254, align 4, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %272 = load i32, ptr addrspace(3) %257, align 4, !dbg !67
  %273 = getelementptr float, ptr addrspace(1) %10, i64 %259, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %272, ptr addrspace(1) %273, i1 %262) #3, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3m7ywgiafkdrcefvjly5ivbdzecjyfl6iobkcque5hje4nqwix2.py", directory: "/auto/home/menuab/code/YNNtitan/torchinductor_menuab/3m")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 20, scope: !7)
!16 = !DILocation(line: 34, column: 59, scope: !7)
!17 = !DILocation(line: 38, column: 44, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 31, column: 27, scope: !7)
!20 = !DILocation(line: 34, column: 45, scope: !7)
!21 = !DILocation(line: 34, column: 52, scope: !7)
!22 = !DILocation(line: 34, column: 34, scope: !7)
!23 = !DILocation(line: 34, column: 65, scope: !7)
!24 = !DILocation(line: 34, column: 117, scope: !7)
!25 = !DILocation(line: 35, column: 34, scope: !7)
!26 = !DILocation(line: 35, column: 65, scope: !7)
!27 = !DILocation(line: 35, column: 117, scope: !7)
!28 = !DILocation(line: 36, column: 34, scope: !7)
!29 = !DILocation(line: 36, column: 65, scope: !7)
!30 = !DILocation(line: 36, column: 117, scope: !7)
!31 = !DILocation(line: 37, column: 34, scope: !7)
!32 = !DILocation(line: 37, column: 65, scope: !7)
!33 = !DILocation(line: 37, column: 117, scope: !7)
!34 = !DILocation(line: 38, column: 40, scope: !7)
!35 = !DILocation(line: 38, column: 34, scope: !7)
!36 = !DILocation(line: 38, column: 50, scope: !7)
!37 = !DILocation(line: 39, column: 35, scope: !7)
!38 = !DILocation(line: 39, column: 66, scope: !7)
!39 = !DILocation(line: 39, column: 118, scope: !7)
!40 = !DILocation(line: 40, column: 35, scope: !7)
!41 = !DILocation(line: 40, column: 66, scope: !7)
!42 = !DILocation(line: 40, column: 118, scope: !7)
!43 = !DILocation(line: 41, column: 35, scope: !7)
!44 = !DILocation(line: 41, column: 66, scope: !7)
!45 = !DILocation(line: 41, column: 118, scope: !7)
!46 = !DILocation(line: 42, column: 35, scope: !7)
!47 = !DILocation(line: 42, column: 51, scope: !7)
!48 = !DILocation(line: 43, column: 22, scope: !7)
!49 = !DILocation(line: 44, column: 22, scope: !7)
!50 = !DILocation(line: 52, column: 24, scope: !7)
!51 = !DILocation(line: 53, column: 24, scope: !7)
!52 = !DILocation(line: 55, column: 24, scope: !7)
!53 = !DILocation(line: 57, column: 24, scope: !7)
!54 = !DILocation(line: 59, column: 25, scope: !7)
!55 = !DILocation(line: 256, column: 15, scope: !56, inlinedAt: !59)
!56 = distinct !DILexicalBlockFile(scope: !58, file: !57, discriminator: 0)
!57 = !DIFile(filename: "standard.py", directory: "/auto/home/menuab/miniforge3/envs/titan/lib/python3.10/site-packages/triton/language")
!58 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!59 = !DILocation(line: 61, column: 27, scope: !7)
!60 = !DILocation(line: 267, column: 36, scope: !58, inlinedAt: !59)
!61 = !DILocation(line: 61, column: 30, scope: !7)
!62 = !DILocation(line: 62, column: 25, scope: !7)
!63 = !DILocation(line: 62, column: 37, scope: !7)
!64 = !DILocation(line: 256, column: 15, scope: !56, inlinedAt: !65)
!65 = !DILocation(line: 63, column: 27, scope: !7)
!66 = !DILocation(line: 267, column: 36, scope: !58, inlinedAt: !65)
!67 = !DILocation(line: 63, column: 30, scope: !7)
!68 = !DILocation(line: 64, column: 25, scope: !7)
!69 = !DILocation(line: 64, column: 37, scope: !7)
!70 = !DILocation(line: 64, column: 4, scope: !7)
