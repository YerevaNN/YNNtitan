; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = lshr i32 %9, 5, !dbg !11
  %12 = shl i32 %9, 2, !dbg !11
  %13 = and i32 %12, 2044, !dbg !11
  %14 = shl i32 %8, 11, !dbg !12
  %15 = or disjoint i32 %14, %13, !dbg !13
  %16 = sext i32 %15 to i64, !dbg !14
  %17 = getelementptr i16, ptr addrspace(1) %1, i64 %16, !dbg !14
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %17, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !15
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !15
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !15
  %21 = trunc i32 %19 to i16, !dbg !15
  %extelt.offset = lshr i32 %19, 16, !dbg !15
  %22 = trunc nuw i32 %extelt.offset to i16, !dbg !15
  %23 = trunc i32 %20 to i16, !dbg !15
  %extelt.offset1 = lshr i32 %20, 16, !dbg !15
  %24 = trunc nuw i32 %extelt.offset1 to i16, !dbg !15
  %25 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #5, !dbg !16
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #5, !dbg !16
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #5, !dbg !16
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #5, !dbg !16
  %29 = getelementptr i16, ptr addrspace(1) %2, i64 %16, !dbg !17
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !18
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !18
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !18
  %33 = trunc i32 %31 to i16, !dbg !18
  %extelt.offset2 = lshr i32 %31, 16, !dbg !18
  %34 = trunc nuw i32 %extelt.offset2 to i16, !dbg !18
  %35 = trunc i32 %32 to i16, !dbg !18
  %extelt.offset3 = lshr i32 %32, 16, !dbg !18
  %36 = trunc nuw i32 %extelt.offset3 to i16, !dbg !18
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #5, !dbg !19
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #5, !dbg !19
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #5, !dbg !19
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #5, !dbg !19
  %41 = fadd float %25, %37, !dbg !20
  %42 = fadd float %26, %38, !dbg !20
  %43 = fadd float %27, %39, !dbg !20
  %44 = fadd float %28, %40, !dbg !20
  %45 = fmul float %41, %41, !dbg !21
  %46 = fmul float %42, %42, !dbg !21
  %47 = fmul float %43, %43, !dbg !21
  %48 = fmul float %44, %44, !dbg !21
  %49 = fadd float %45, %46, !dbg !22
  %50 = fadd float %49, %47, !dbg !22
  %51 = fadd float %50, %48, !dbg !22
  %52 = bitcast float %51 to i32, !dbg !27
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 16, i32 31), !dbg !27
  %54 = bitcast i32 %53 to float, !dbg !27
  %55 = fadd float %51, %54, !dbg !22
  %56 = bitcast float %55 to i32, !dbg !27
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 8, i32 31), !dbg !27
  %58 = bitcast i32 %57 to float, !dbg !27
  %59 = fadd float %55, %58, !dbg !22
  %60 = bitcast float %59 to i32, !dbg !27
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 4, i32 31), !dbg !27
  %62 = bitcast i32 %61 to float, !dbg !27
  %63 = fadd float %59, %62, !dbg !22
  %64 = bitcast float %63 to i32, !dbg !27
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 2, i32 31), !dbg !27
  %66 = bitcast i32 %65 to float, !dbg !27
  %67 = fadd float %63, %66, !dbg !22
  %68 = bitcast float %67 to i32, !dbg !27
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !27
  %70 = bitcast i32 %69 to float, !dbg !27
  %71 = fadd float %67, %70, !dbg !22
  %72 = icmp eq i32 %10, 0, !dbg !27
  %73 = and i32 %11, 15, !dbg !27
  %74 = zext nneg i32 %73 to i64, !dbg !27
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i64 %74, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, float %71, i1 %72) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %76 = icmp slt i32 %9, 16, !dbg !27
  %77 = sext i32 %9 to i64, !dbg !27
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i64 %77, !dbg !27
  %79 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %78, i1 %76) #5, !dbg !27
  %80 = bitcast float %79 to i32, !dbg !27
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !27
  %82 = bitcast i32 %81 to float, !dbg !27
  %83 = fadd float %79, %82, !dbg !22
  %84 = bitcast float %83 to i32, !dbg !27
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !27
  %86 = bitcast i32 %85 to float, !dbg !27
  %87 = fadd float %83, %86, !dbg !22
  %88 = bitcast float %87 to i32, !dbg !27
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !27
  %90 = bitcast i32 %89 to float, !dbg !27
  %91 = fadd float %87, %90, !dbg !22
  %92 = bitcast float %91 to i32, !dbg !27
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !27
  %94 = bitcast i32 %93 to float, !dbg !27
  %95 = fadd float %91, %94, !dbg !22
  %96 = and i32 %9, 15, !dbg !27
  %97 = icmp eq i32 %96, 0, !dbg !27
  %98 = and i1 %76, %97, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, float %95, i1 %98) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %99 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 2.048000e+03) #5, !dbg !29
  %101 = fadd float %100, 0x3EE4F8B580000000, !dbg !30
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i = icmp eq i32 %102, 0, !dbg !28
  br i1 %.not.i, label %105, label %103, !dbg !28

103:                                              ; preds = %7
  %104 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %101), !dbg !28
  br label %__nv_rsqrtf.exit, !dbg !28

105:                                              ; preds = %7
  %106 = tail call float @llvm.nvvm.rsqrt.approx.f(float %101), !dbg !28
  br label %__nv_rsqrtf.exit, !dbg !28

__nv_rsqrtf.exit:                                 ; preds = %103, %105
  %.0.i = phi float [ %104, %103 ], [ %106, %105 ], !dbg !28
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i19 = icmp eq i32 %110, 0, !dbg !28
  br i1 %.not.i19, label %113, label %111, !dbg !28

111:                                              ; preds = %__nv_rsqrtf.exit
  %112 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %101), !dbg !28
  br label %__nv_rsqrtf.exit21, !dbg !28

113:                                              ; preds = %__nv_rsqrtf.exit
  %114 = tail call float @llvm.nvvm.rsqrt.approx.f(float %101), !dbg !28
  br label %__nv_rsqrtf.exit21, !dbg !28

__nv_rsqrtf.exit21:                               ; preds = %111, %113
  %.0.i20 = phi float [ %112, %111 ], [ %114, %113 ], !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %115 = sext i32 %8 to i64, !dbg !32
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !32
  %urem = and i32 %9, 511, !dbg !33
  %117 = icmp eq i32 %urem, 0, !dbg !33
  %118 = bitcast float %.0.i to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %116, i1 %117) #5, !dbg !33
  %119 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %17, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !34
  %120 = extractvalue { i32, i32 } %119, 0, !dbg !34
  %121 = extractvalue { i32, i32 } %119, 1, !dbg !34
  %122 = trunc i32 %120 to i16, !dbg !34
  %extelt.offset4 = lshr i32 %120, 16, !dbg !34
  %123 = trunc nuw i32 %extelt.offset4 to i16, !dbg !34
  %124 = trunc i32 %121 to i16, !dbg !34
  %extelt.offset5 = lshr i32 %121, 16, !dbg !34
  %125 = trunc nuw i32 %extelt.offset5 to i16, !dbg !34
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %122) #5, !dbg !35
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %123) #5, !dbg !35
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %124) #5, !dbg !35
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %125) #5, !dbg !35
  %130 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !36
  %131 = extractvalue { i32, i32 } %130, 0, !dbg !36
  %132 = extractvalue { i32, i32 } %130, 1, !dbg !36
  %133 = trunc i32 %131 to i16, !dbg !36
  %extelt.offset6 = lshr i32 %131, 16, !dbg !36
  %134 = trunc nuw i32 %extelt.offset6 to i16, !dbg !36
  %135 = trunc i32 %132 to i16, !dbg !36
  %extelt.offset7 = lshr i32 %132, 16, !dbg !36
  %136 = trunc nuw i32 %extelt.offset7 to i16, !dbg !36
  %137 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %133) #5, !dbg !37
  %138 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %134) #5, !dbg !37
  %139 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %135) #5, !dbg !37
  %140 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %136) #5, !dbg !37
  %141 = zext nneg i32 %13 to i64, !dbg !38
  %142 = getelementptr i16, ptr addrspace(1) %3, i64 %141, !dbg !38
  %143 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %142, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !39
  %144 = extractvalue { i32, i32 } %143, 0, !dbg !39
  %145 = extractvalue { i32, i32 } %143, 1, !dbg !39
  %146 = trunc i32 %144 to i16, !dbg !39
  %extelt.offset8 = lshr i32 %144, 16, !dbg !39
  %147 = trunc nuw i32 %extelt.offset8 to i16, !dbg !39
  %148 = trunc i32 %145 to i16, !dbg !39
  %extelt.offset9 = lshr i32 %145, 16, !dbg !39
  %149 = trunc nuw i32 %extelt.offset9 to i16, !dbg !39
  %150 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %146) #5, !dbg !40
  %151 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %147) #5, !dbg !40
  %152 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %148) #5, !dbg !40
  %153 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %149) #5, !dbg !40
  %154 = fadd float %126, %137, !dbg !41
  %155 = fadd float %127, %138, !dbg !41
  %156 = fadd float %128, %139, !dbg !41
  %157 = fadd float %129, %140, !dbg !41
  %158 = fmul float %.0.i20, %154, !dbg !42
  %159 = fmul float %.0.i20, %155, !dbg !42
  %160 = fmul float %.0.i20, %156, !dbg !42
  %161 = fmul float %.0.i20, %157, !dbg !42
  %162 = fmul float %158, %150, !dbg !43
  %163 = fmul float %159, %151, !dbg !43
  %164 = fmul float %160, %152, !dbg !43
  %165 = fmul float %161, %153, !dbg !43
  %166 = getelementptr i16, ptr addrspace(1) %4, i64 %16, !dbg !44
  %167 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %162) #5, !dbg !45
  %168 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %163) #5, !dbg !45
  %169 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %164) #5, !dbg !45
  %170 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %165) #5, !dbg !45
  %171 = insertelement <2 x i16> poison, i16 %167, i64 0, !dbg !45
  %172 = insertelement <2 x i16> %171, i16 %168, i64 1, !dbg !45
  %173 = bitcast <2 x i16> %172 to i32, !dbg !45
  %174 = insertelement <2 x i16> poison, i16 %169, i64 0, !dbg !45
  %175 = insertelement <2 x i16> %174, i16 %170, i64 1, !dbg !45
  %176 = bitcast <2 x i16> %175 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %176, ptr addrspace(1) %166, i1 true) #5, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czqf67hsyffem2uhtx6eagzm5n24di5mxqyxci7klqbhk53y5ot3.py", directory: "/auto/home/menuab/code/YNNtitan/torchinductor_menuab/zq")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 51, scope: !7)
!19 = !DILocation(line: 32, column: 102, scope: !7)
!20 = !DILocation(line: 33, column: 22, scope: !7)
!21 = !DILocation(line: 35, column: 22, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/auto/home/menuab/miniforge3/envs/titan/lib/python3.10/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 39, column: 25, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 44, column: 28, scope: !7)
!29 = !DILocation(line: 41, column: 18, scope: !7)
!30 = !DILocation(line: 43, column: 19, scope: !7)
!31 = !DILocation(line: 45, column: 4, scope: !7)
!32 = !DILocation(line: 46, column: 28, scope: !7)
!33 = !DILocation(line: 46, column: 40, scope: !7)
!34 = !DILocation(line: 51, column: 52, scope: !7)
!35 = !DILocation(line: 51, column: 104, scope: !7)
!36 = !DILocation(line: 52, column: 52, scope: !7)
!37 = !DILocation(line: 52, column: 104, scope: !7)
!38 = !DILocation(line: 53, column: 35, scope: !7)
!39 = !DILocation(line: 53, column: 40, scope: !7)
!40 = !DILocation(line: 53, column: 91, scope: !7)
!41 = !DILocation(line: 54, column: 24, scope: !7)
!42 = !DILocation(line: 56, column: 24, scope: !7)
!43 = !DILocation(line: 58, column: 24, scope: !7)
!44 = !DILocation(line: 59, column: 29, scope: !7)
!45 = !DILocation(line: 59, column: 53, scope: !7)
!46 = !DILocation(line: 47, column: 4, scope: !7)
