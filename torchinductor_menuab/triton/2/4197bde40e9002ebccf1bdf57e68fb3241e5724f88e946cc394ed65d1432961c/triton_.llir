; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = shl i32 %11, 1, !dbg !11
  %14 = and i32 %13, 510, !dbg !11
  %15 = shl i32 %10, 11, !dbg !12
  br label %16, !dbg !13

16:                                               ; preds = %9, %16
  %17 = phi float [ 0.000000e+00, %9 ], [ %62, %16 ]
  %18 = phi float [ 0.000000e+00, %9 ], [ %63, %16 ]
  %19 = phi i32 [ 0, %9 ], [ %64, %16 ]
  %20 = or disjoint i32 %19, %14, !dbg !14
  %21 = or disjoint i32 %20, %15, !dbg !15
  %22 = sext i32 %21 to i64, !dbg !16
  %23 = getelementptr i16, ptr addrspace(1) %1, i64 %22, !dbg !16
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 true, i32 0, i1 true) #3, !dbg !17
  %25 = trunc i32 %24 to i16, !dbg !17
  %extelt.offset7 = lshr i32 %24, 16, !dbg !17
  %26 = trunc nuw i32 %extelt.offset7 to i16, !dbg !17
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #3, !dbg !18
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #3, !dbg !18
  %29 = getelementptr i16, ptr addrspace(1) %2, i64 %22, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 true, i32 0, i1 true) #3, !dbg !20
  %31 = trunc i32 %30 to i16, !dbg !20
  %extelt.offset8 = lshr i32 %30, 16, !dbg !20
  %32 = trunc nuw i32 %extelt.offset8 to i16, !dbg !20
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #3, !dbg !21
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #3, !dbg !21
  %35 = getelementptr i16, ptr addrspace(1) %3, i64 %22, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 true, i32 0, i1 true) #3, !dbg !23
  %37 = trunc i32 %36 to i16, !dbg !23
  %extelt.offset9 = lshr i32 %36, 16, !dbg !23
  %38 = trunc nuw i32 %extelt.offset9 to i16, !dbg !23
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #3, !dbg !24
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #3, !dbg !24
  %41 = zext nneg i32 %20 to i64, !dbg !25
  %42 = getelementptr i16, ptr addrspace(1) %4, i64 %41, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 true, i32 0, i1 true) #3, !dbg !26
  %44 = trunc i32 %43 to i16, !dbg !26
  %extelt.offset10 = lshr i32 %43, 16, !dbg !26
  %45 = trunc nuw i32 %extelt.offset10 to i16, !dbg !26
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #3, !dbg !27
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #3, !dbg !27
  %48 = getelementptr i16, ptr addrspace(1) %5, i64 %22, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 true, i32 0, i1 true) #3, !dbg !29
  %50 = trunc i32 %49 to i16, !dbg !29
  %extelt.offset11 = lshr i32 %49, 16, !dbg !29
  %51 = trunc nuw i32 %extelt.offset11 to i16, !dbg !29
  %52 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #3, !dbg !30
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #3, !dbg !30
  %54 = fadd float %27, %33, !dbg !31
  %55 = fadd float %28, %34, !dbg !31
  %56 = fadd float %54, %39, !dbg !32
  %57 = fadd float %55, %40, !dbg !32
  %58 = fmul float %56, %46, !dbg !33
  %59 = fmul float %57, %47, !dbg !33
  %60 = fmul float %58, %52, !dbg !34
  %61 = fmul float %59, %53, !dbg !34
  %62 = fadd float %17, %60, !dbg !35
  %63 = fadd float %18, %61, !dbg !35
  %64 = add nuw nsw i32 %19, 512, !dbg !13
  %65 = icmp ult i32 %19, 1536, !dbg !13
  br i1 %65, label %16, label %66, !dbg !13

66:                                               ; preds = %16
  %67 = lshr i32 %11, 5, !dbg !11
  %68 = fadd float %62, %63, !dbg !36
  %69 = bitcast float %68 to i32, !dbg !41
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !41
  %71 = bitcast i32 %70 to float, !dbg !41
  %72 = fadd float %68, %71, !dbg !36
  %73 = bitcast float %72 to i32, !dbg !41
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !41
  %75 = bitcast i32 %74 to float, !dbg !41
  %76 = fadd float %72, %75, !dbg !36
  %77 = bitcast float %76 to i32, !dbg !41
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !41
  %79 = bitcast i32 %78 to float, !dbg !41
  %80 = fadd float %76, %79, !dbg !36
  %81 = bitcast float %80 to i32, !dbg !41
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !41
  %83 = bitcast i32 %82 to float, !dbg !41
  %84 = fadd float %80, %83, !dbg !36
  %85 = bitcast float %84 to i32, !dbg !41
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !41
  %87 = bitcast i32 %86 to float, !dbg !41
  %88 = fadd float %84, %87, !dbg !36
  %89 = icmp eq i32 %12, 0, !dbg !41
  %90 = and i32 %67, 7, !dbg !41
  %91 = zext nneg i32 %90 to i64, !dbg !41
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i64 %91, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, float %88, i1 %89) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %93 = icmp slt i32 %11, 8, !dbg !41
  %94 = sext i32 %11 to i64, !dbg !41
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i64 %94, !dbg !41
  %96 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %95, i1 %93) #3, !dbg !41
  %97 = bitcast float %96 to i32, !dbg !41
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 4, i32 31), !dbg !41
  %99 = bitcast i32 %98 to float, !dbg !41
  %100 = fadd float %96, %99, !dbg !36
  %101 = bitcast float %100 to i32, !dbg !41
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 2, i32 31), !dbg !41
  %103 = bitcast i32 %102 to float, !dbg !41
  %104 = fadd float %100, %103, !dbg !36
  %105 = bitcast float %104 to i32, !dbg !41
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !41
  %107 = bitcast i32 %106 to float, !dbg !41
  %108 = fadd float %104, %107, !dbg !36
  %109 = and i32 %11, 7, !dbg !41
  %110 = icmp eq i32 %109, 0, !dbg !41
  %111 = and i1 %93, %110, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, float %108, i1 %111) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %112 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %113 = sext i32 %10 to i64, !dbg !42
  %114 = getelementptr float, ptr addrspace(1) %6, i64 %113, !dbg !42
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #3, !dbg !43
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #3, !dbg !43
  %117 = bitcast i32 %116 to float, !dbg !43
  %118 = fmul float %112, -5.000000e-01, !dbg !44
  %119 = fmul float %117, %117, !dbg !45
  %120 = fmul float %119, %117, !dbg !46
  %121 = fmul float %118, %120, !dbg !47
  %122 = fmul float %121, 0x3F40000000000000, !dbg !48
  br label %123, !dbg !49

123:                                              ; preds = %66, %123
  %124 = phi i32 [ 0, %66 ], [ %186, %123 ]
  %125 = or disjoint i32 %124, %14, !dbg !50
  %126 = or disjoint i32 %125, %15, !dbg !51
  %127 = sext i32 %126 to i64, !dbg !52
  %128 = getelementptr i16, ptr addrspace(1) %0, i64 %127, !dbg !52
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 true, i32 0, i1 true) #3, !dbg !53
  %130 = trunc i32 %129 to i16, !dbg !53
  %extelt.offset = lshr i32 %129, 16, !dbg !53
  %131 = trunc nuw i32 %extelt.offset to i16, !dbg !53
  %132 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %130) #3, !dbg !54
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %131) #3, !dbg !54
  %134 = getelementptr i16, ptr addrspace(1) %1, i64 %127, !dbg !55
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 true, i32 0, i1 true) #3, !dbg !56
  %136 = trunc i32 %135 to i16, !dbg !56
  %extelt.offset2 = lshr i32 %135, 16, !dbg !56
  %137 = trunc nuw i32 %extelt.offset2 to i16, !dbg !56
  %138 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %136) #3, !dbg !57
  %139 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %137) #3, !dbg !57
  %140 = getelementptr i16, ptr addrspace(1) %2, i64 %127, !dbg !58
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 true, i32 0, i1 true) #3, !dbg !59
  %142 = trunc i32 %141 to i16, !dbg !59
  %extelt.offset3 = lshr i32 %141, 16, !dbg !59
  %143 = trunc nuw i32 %extelt.offset3 to i16, !dbg !59
  %144 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %142) #3, !dbg !60
  %145 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %143) #3, !dbg !60
  %146 = getelementptr i16, ptr addrspace(1) %3, i64 %127, !dbg !61
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 true, i32 0, i1 true) #3, !dbg !62
  %148 = trunc i32 %147 to i16, !dbg !62
  %extelt.offset4 = lshr i32 %147, 16, !dbg !62
  %149 = trunc nuw i32 %extelt.offset4 to i16, !dbg !62
  %150 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %148) #3, !dbg !63
  %151 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %149) #3, !dbg !63
  %152 = zext nneg i32 %125 to i64, !dbg !64
  %153 = getelementptr i16, ptr addrspace(1) %4, i64 %152, !dbg !64
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 true, i32 0, i1 true) #3, !dbg !65
  %155 = trunc i32 %154 to i16, !dbg !65
  %extelt.offset5 = lshr i32 %154, 16, !dbg !65
  %156 = trunc nuw i32 %extelt.offset5 to i16, !dbg !65
  %157 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %155) #3, !dbg !66
  %158 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %156) #3, !dbg !66
  %159 = getelementptr i16, ptr addrspace(1) %5, i64 %127, !dbg !67
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 true, i32 0, i1 true) #3, !dbg !68
  %161 = trunc i32 %160 to i16, !dbg !68
  %extelt.offset6 = lshr i32 %160, 16, !dbg !68
  %162 = trunc nuw i32 %extelt.offset6 to i16, !dbg !68
  %163 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %161) #3, !dbg !69
  %164 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %162) #3, !dbg !69
  %165 = fadd float %138, %144, !dbg !70
  %166 = fadd float %139, %145, !dbg !70
  %167 = fadd float %165, %150, !dbg !71
  %168 = fadd float %166, %151, !dbg !71
  %169 = fmul float %167, %157, !dbg !72
  %170 = fmul float %168, %158, !dbg !72
  %171 = fmul float %169, %117, !dbg !73
  %172 = fmul float %170, %117, !dbg !73
  %173 = fmul float %163, 2.000000e+00, !dbg !74
  %174 = fmul float %164, 2.000000e+00, !dbg !74
  %175 = fmul float %122, %173, !dbg !75
  %176 = fmul float %122, %174, !dbg !75
  %177 = fadd float %171, %175, !dbg !76
  %178 = fadd float %172, %176, !dbg !76
  %179 = fadd float %132, %177, !dbg !77
  %180 = fadd float %133, %178, !dbg !77
  %181 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %179) #3, !dbg !78
  %182 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %180) #3, !dbg !78
  %183 = insertelement <2 x i16> poison, i16 %181, i64 0, !dbg !78
  %184 = insertelement <2 x i16> %183, i16 %182, i64 1, !dbg !78
  %185 = bitcast <2 x i16> %184 to i32, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %128, i1 true) #3, !dbg !78
  %186 = add nuw nsw i32 %124, 512, !dbg !49
  %187 = icmp ult i32 %124, 1536, !dbg !49
  br i1 %187, label %123, label %188, !dbg !49

188:                                              ; preds = %123
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceyq7s2m7eg7wsbogh5g74szf4crhvboq7n4vbjwimy4hdzmjf4l.py", directory: "/auto/home/menuab/code/YNNtitan/torchinductor_menuab/ey")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 27, column: 36, scope: !7)
!14 = !DILocation(line: 28, column: 27, scope: !7)
!15 = !DILocation(line: 31, column: 40, scope: !7)
!16 = !DILocation(line: 31, column: 34, scope: !7)
!17 = !DILocation(line: 31, column: 51, scope: !7)
!18 = !DILocation(line: 31, column: 102, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 51, scope: !7)
!21 = !DILocation(line: 32, column: 102, scope: !7)
!22 = !DILocation(line: 33, column: 34, scope: !7)
!23 = !DILocation(line: 33, column: 51, scope: !7)
!24 = !DILocation(line: 33, column: 102, scope: !7)
!25 = !DILocation(line: 34, column: 34, scope: !7)
!26 = !DILocation(line: 34, column: 39, scope: !7)
!27 = !DILocation(line: 34, column: 90, scope: !7)
!28 = !DILocation(line: 35, column: 34, scope: !7)
!29 = !DILocation(line: 35, column: 51, scope: !7)
!30 = !DILocation(line: 35, column: 102, scope: !7)
!31 = !DILocation(line: 36, column: 22, scope: !7)
!32 = !DILocation(line: 37, column: 22, scope: !7)
!33 = !DILocation(line: 38, column: 22, scope: !7)
!34 = !DILocation(line: 41, column: 23, scope: !7)
!35 = !DILocation(line: 43, column: 25, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/auto/home/menuab/miniforge3/envs/titan/lib/python3.10/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!40 = !DILocation(line: 45, column: 27, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 46, column: 31, scope: !7)
!43 = !DILocation(line: 46, column: 36, scope: !7)
!44 = !DILocation(line: 63, column: 24, scope: !7)
!45 = !DILocation(line: 64, column: 24, scope: !7)
!46 = !DILocation(line: 65, column: 24, scope: !7)
!47 = !DILocation(line: 66, column: 24, scope: !7)
!48 = !DILocation(line: 68, column: 24, scope: !7)
!49 = !DILocation(line: 47, column: 36, scope: !7)
!50 = !DILocation(line: 48, column: 27, scope: !7)
!51 = !DILocation(line: 51, column: 45, scope: !7)
!52 = !DILocation(line: 51, column: 39, scope: !7)
!53 = !DILocation(line: 51, column: 56, scope: !7)
!54 = !DILocation(line: 51, column: 108, scope: !7)
!55 = !DILocation(line: 52, column: 35, scope: !7)
!56 = !DILocation(line: 52, column: 52, scope: !7)
!57 = !DILocation(line: 52, column: 104, scope: !7)
!58 = !DILocation(line: 53, column: 35, scope: !7)
!59 = !DILocation(line: 53, column: 52, scope: !7)
!60 = !DILocation(line: 53, column: 104, scope: !7)
!61 = !DILocation(line: 54, column: 35, scope: !7)
!62 = !DILocation(line: 54, column: 52, scope: !7)
!63 = !DILocation(line: 54, column: 104, scope: !7)
!64 = !DILocation(line: 55, column: 35, scope: !7)
!65 = !DILocation(line: 55, column: 40, scope: !7)
!66 = !DILocation(line: 55, column: 91, scope: !7)
!67 = !DILocation(line: 56, column: 35, scope: !7)
!68 = !DILocation(line: 56, column: 52, scope: !7)
!69 = !DILocation(line: 56, column: 104, scope: !7)
!70 = !DILocation(line: 57, column: 24, scope: !7)
!71 = !DILocation(line: 58, column: 24, scope: !7)
!72 = !DILocation(line: 59, column: 24, scope: !7)
!73 = !DILocation(line: 61, column: 24, scope: !7)
!74 = !DILocation(line: 71, column: 24, scope: !7)
!75 = !DILocation(line: 72, column: 24, scope: !7)
!76 = !DILocation(line: 73, column: 24, scope: !7)
!77 = !DILocation(line: 75, column: 24, scope: !7)
!78 = !DILocation(line: 76, column: 56, scope: !7)
!79 = !DILocation(line: 47, column: 4, scope: !7)
