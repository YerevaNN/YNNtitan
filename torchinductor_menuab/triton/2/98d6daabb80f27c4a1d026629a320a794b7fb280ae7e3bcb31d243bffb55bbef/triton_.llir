; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = or disjoint i32 %6, %10, !dbg !13
  %12 = or disjoint i32 %6, %8, !dbg !13
  %13 = lshr i32 %7, 5, !dbg !14
  %14 = shl i32 %7, 8, !dbg !15
  %15 = and i32 %14, 63488, !dbg !15
  %16 = or disjoint i32 %15, 65536, !dbg !15
  %17 = add i32 %11, %15, !dbg !16
  %18 = add i32 %16, %11, !dbg !16
  %19 = sext i32 %17 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !18
  %28 = bitcast i32 %24 to float, !dbg !18
  %29 = bitcast i32 %25 to float, !dbg !18
  %30 = bitcast i32 %26 to float, !dbg !18
  %31 = bitcast i32 %27 to float, !dbg !18
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !18
  %37 = bitcast i32 %33 to float, !dbg !18
  %38 = bitcast i32 %34 to float, !dbg !18
  %39 = bitcast i32 %35 to float, !dbg !18
  %40 = bitcast i32 %36 to float, !dbg !18
  %41 = fadd float %28, %37, !dbg !19
  %42 = fadd float %29, %38, !dbg !19
  %43 = fadd float %30, %39, !dbg !19
  %44 = fadd float %31, %40, !dbg !19
  %45 = bitcast float %41 to i32, !dbg !24
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 16, i32 31), !dbg !24
  %47 = bitcast i32 %46 to float, !dbg !24
  %48 = fadd float %41, %47, !dbg !19
  %49 = bitcast float %48 to i32, !dbg !24
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 8, i32 31), !dbg !24
  %51 = bitcast i32 %50 to float, !dbg !24
  %52 = fadd float %48, %51, !dbg !19
  %53 = bitcast float %42 to i32, !dbg !24
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 16, i32 31), !dbg !24
  %55 = bitcast i32 %54 to float, !dbg !24
  %56 = fadd float %42, %55, !dbg !19
  %57 = bitcast float %56 to i32, !dbg !24
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 8, i32 31), !dbg !24
  %59 = bitcast i32 %58 to float, !dbg !24
  %60 = fadd float %56, %59, !dbg !19
  %61 = bitcast float %43 to i32, !dbg !24
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 16, i32 31), !dbg !24
  %63 = bitcast i32 %62 to float, !dbg !24
  %64 = fadd float %43, %63, !dbg !19
  %65 = bitcast float %64 to i32, !dbg !24
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 8, i32 31), !dbg !24
  %67 = bitcast i32 %66 to float, !dbg !24
  %68 = fadd float %64, %67, !dbg !19
  %69 = bitcast float %44 to i32, !dbg !24
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !24
  %71 = bitcast i32 %70 to float, !dbg !24
  %72 = fadd float %44, %71, !dbg !19
  %73 = bitcast float %72 to i32, !dbg !24
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !24
  %75 = bitcast i32 %74 to float, !dbg !24
  %76 = fadd float %72, %75, !dbg !19
  %77 = icmp ult i32 %8, 8, !dbg !24
  %78 = and i32 %13, 7, !dbg !24
  %79 = shl nuw nsw i32 %10, 3, !dbg !24
  %80 = or disjoint i32 %79, %78, !dbg !24
  %81 = zext nneg i32 %80 to i64, !dbg !24
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i64 %81, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, float %52, i1 %77) #3, !dbg !24
  %83 = or disjoint i32 %79, 8, !dbg !24
  %84 = or disjoint i32 %83, %78, !dbg !24
  %85 = zext nneg i32 %84 to i64, !dbg !24
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i64 %85, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, float %60, i1 %77) #3, !dbg !24
  %87 = or disjoint i32 %79, 16, !dbg !24
  %88 = or disjoint i32 %87, %78, !dbg !24
  %89 = zext nneg i32 %88 to i64, !dbg !24
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i64 %89, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, float %68, i1 %77) #3, !dbg !24
  %91 = or disjoint i32 %79, 24, !dbg !24
  %92 = or disjoint i32 %91, %78, !dbg !24
  %93 = zext nneg i32 %92 to i64, !dbg !24
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i64 %93, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, float %76, i1 %77) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %95 = icmp slt i32 %7, 256, !dbg !24
  %96 = sext i32 %7 to i64, !dbg !24
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i64 %96, !dbg !24
  %98 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %97, i1 %95) #3, !dbg !24
  %99 = bitcast float %98 to i32, !dbg !24
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 4, i32 31), !dbg !24
  %101 = bitcast i32 %100 to float, !dbg !24
  %102 = fadd float %98, %101, !dbg !19
  %103 = bitcast float %102 to i32, !dbg !24
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 2, i32 31), !dbg !24
  %105 = bitcast i32 %104 to float, !dbg !24
  %106 = fadd float %102, %105, !dbg !19
  %107 = bitcast float %106 to i32, !dbg !24
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !24
  %109 = bitcast i32 %108 to float, !dbg !24
  %110 = fadd float %106, %109, !dbg !19
  %111 = and i32 %7, 7, !dbg !24
  %112 = icmp eq i32 %111, 0, !dbg !24
  %113 = and i1 %95, %112, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, float %110, i1 %113) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %114 = zext nneg i32 %79 to i64, !dbg !24
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i64 %114, !dbg !24
  %116 = load float, ptr addrspace(3) %115, align 16, !dbg !24
  %117 = zext nneg i32 %83 to i64, !dbg !24
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i64 %117, !dbg !24
  %119 = load float, ptr addrspace(3) %118, align 16, !dbg !24
  %120 = zext nneg i32 %87 to i64, !dbg !24
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i64 %120, !dbg !24
  %122 = load float, ptr addrspace(3) %121, align 16, !dbg !24
  %123 = zext nneg i32 %91 to i64, !dbg !24
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i64 %123, !dbg !24
  %125 = load float, ptr addrspace(3) %124, align 16, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %126 = shl nuw nsw i32 %111, 2, !dbg !25
  %127 = zext nneg i32 %126 to i64, !dbg !25
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i64 %127, !dbg !25
  %129 = insertelement <4 x float> poison, float %116, i64 0, !dbg !25
  %130 = insertelement <4 x float> %129, float %119, i64 1, !dbg !25
  %131 = insertelement <4 x float> %130, float %122, i64 2, !dbg !25
  %132 = insertelement <4 x float> %131, float %125, i64 3, !dbg !25
  store <4 x float> %132, ptr addrspace(3) %128, align 16, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %133 = zext nneg i32 %8 to i64, !dbg !25
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i64 %133, !dbg !25
  %135 = load float, ptr addrspace(3) %134, align 4, !dbg !25
  %136 = sext i32 %12 to i64, !dbg !26
  %137 = getelementptr i16, ptr addrspace(1) %1, i64 %136, !dbg !26
  %138 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %135) #3, !dbg !25
  %139 = icmp eq i32 %78, 0, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %138, ptr addrspace(1) %137, i1 %139) #3, !dbg !25
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqypnnha6mjaft46am2rkocnboecmqmc6ccbbxbaulhyyf5skjv7.py", directory: "/auto/home/menuab/code/YNNtitan/torchinductor_menuab/qy")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 34, scope: !7)
!15 = !DILocation(line: 30, column: 41, scope: !7)
!16 = !DILocation(line: 30, column: 36, scope: !7)
!17 = !DILocation(line: 30, column: 30, scope: !7)
!18 = !DILocation(line: 30, column: 47, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/auto/home/menuab/miniforge3/envs/titan/lib/python3.10/site-packages/triton/language")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 32, column: 24, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 33, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 25, scope: !7)
!27 = !DILocation(line: 33, column: 4, scope: !7)
