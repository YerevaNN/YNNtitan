; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 3, !dbg !12
  %8 = and i32 %7, 1016, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %.frozen = freeze i32 %9
  %10 = sdiv i32 %.frozen, 64, !dbg !14
  %11 = mul i32 %10, 64
  %.decomposed = sub i32 %.frozen, %11
  %12 = shl i32 %10, 8, !dbg !15
  %13 = add i32 %12, %.decomposed, !dbg !16
  %14 = sext i32 %13 to i64, !dbg !17
  %15 = getelementptr i16, ptr addrspace(1) %0, i64 %14, !dbg !17
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #1, !dbg !18
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !18
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !18
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !18
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !18
  %21 = trunc i32 %17 to i16, !dbg !18
  %extelt.offset = lshr i32 %17, 16, !dbg !18
  %22 = trunc nuw i32 %extelt.offset to i16, !dbg !18
  %23 = trunc i32 %18 to i16, !dbg !18
  %extelt.offset1 = lshr i32 %18, 16, !dbg !18
  %24 = trunc nuw i32 %extelt.offset1 to i16, !dbg !18
  %25 = trunc i32 %19 to i16, !dbg !18
  %extelt.offset2 = lshr i32 %19, 16, !dbg !18
  %26 = trunc nuw i32 %extelt.offset2 to i16, !dbg !18
  %27 = trunc i32 %20 to i16, !dbg !18
  %extelt.offset3 = lshr i32 %20, 16, !dbg !18
  %28 = trunc nuw i32 %extelt.offset3 to i16, !dbg !18
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #1, !dbg !19
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #1, !dbg !19
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #1, !dbg !19
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #1, !dbg !19
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #1, !dbg !19
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #1, !dbg !19
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #1, !dbg !19
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #1, !dbg !19
  %37 = add i32 %13, 64, !dbg !20
  %38 = sext i32 %37 to i64, !dbg !21
  %39 = getelementptr i16, ptr addrspace(1) %0, i64 %38, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %45 = trunc i32 %41 to i16, !dbg !22
  %extelt.offset4 = lshr i32 %41, 16, !dbg !22
  %46 = trunc nuw i32 %extelt.offset4 to i16, !dbg !22
  %47 = trunc i32 %42 to i16, !dbg !22
  %extelt.offset5 = lshr i32 %42, 16, !dbg !22
  %48 = trunc nuw i32 %extelt.offset5 to i16, !dbg !22
  %49 = trunc i32 %43 to i16, !dbg !22
  %extelt.offset6 = lshr i32 %43, 16, !dbg !22
  %50 = trunc nuw i32 %extelt.offset6 to i16, !dbg !22
  %51 = trunc i32 %44 to i16, !dbg !22
  %extelt.offset7 = lshr i32 %44, 16, !dbg !22
  %52 = trunc nuw i32 %extelt.offset7 to i16, !dbg !22
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #1, !dbg !23
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #1, !dbg !23
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #1, !dbg !23
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %48) #1, !dbg !23
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #1, !dbg !23
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #1, !dbg !23
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #1, !dbg !23
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #1, !dbg !23
  %61 = add i32 %13, 128, !dbg !24
  %62 = sext i32 %61 to i64, !dbg !25
  %63 = getelementptr i16, ptr addrspace(1) %0, i64 %62, !dbg !25
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = trunc i32 %65 to i16, !dbg !26
  %extelt.offset8 = lshr i32 %65, 16, !dbg !26
  %70 = trunc nuw i32 %extelt.offset8 to i16, !dbg !26
  %71 = trunc i32 %66 to i16, !dbg !26
  %extelt.offset9 = lshr i32 %66, 16, !dbg !26
  %72 = trunc nuw i32 %extelt.offset9 to i16, !dbg !26
  %73 = trunc i32 %67 to i16, !dbg !26
  %extelt.offset10 = lshr i32 %67, 16, !dbg !26
  %74 = trunc nuw i32 %extelt.offset10 to i16, !dbg !26
  %75 = trunc i32 %68 to i16, !dbg !26
  %extelt.offset11 = lshr i32 %68, 16, !dbg !26
  %76 = trunc nuw i32 %extelt.offset11 to i16, !dbg !26
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #1, !dbg !27
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #1, !dbg !27
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #1, !dbg !27
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #1, !dbg !27
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #1, !dbg !27
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #1, !dbg !27
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #1, !dbg !27
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #1, !dbg !27
  %85 = add i32 %13, 192, !dbg !28
  %86 = sext i32 %85 to i64, !dbg !29
  %87 = getelementptr i16, ptr addrspace(1) %0, i64 %86, !dbg !29
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !30
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !30
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !30
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !30
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !30
  %93 = trunc i32 %89 to i16, !dbg !30
  %extelt.offset12 = lshr i32 %89, 16, !dbg !30
  %94 = trunc nuw i32 %extelt.offset12 to i16, !dbg !30
  %95 = trunc i32 %90 to i16, !dbg !30
  %extelt.offset13 = lshr i32 %90, 16, !dbg !30
  %96 = trunc nuw i32 %extelt.offset13 to i16, !dbg !30
  %97 = trunc i32 %91 to i16, !dbg !30
  %extelt.offset14 = lshr i32 %91, 16, !dbg !30
  %98 = trunc nuw i32 %extelt.offset14 to i16, !dbg !30
  %99 = trunc i32 %92 to i16, !dbg !30
  %extelt.offset15 = lshr i32 %92, 16, !dbg !30
  %100 = trunc nuw i32 %extelt.offset15 to i16, !dbg !30
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #1, !dbg !31
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #1, !dbg !31
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #1, !dbg !31
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #1, !dbg !31
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %97) #1, !dbg !31
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %98) #1, !dbg !31
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #1, !dbg !31
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #1, !dbg !31
  %109 = fadd float %29, %53, !dbg !32
  %110 = fadd float %30, %54, !dbg !32
  %111 = fadd float %31, %55, !dbg !32
  %112 = fadd float %32, %56, !dbg !32
  %113 = fadd float %33, %57, !dbg !32
  %114 = fadd float %34, %58, !dbg !32
  %115 = fadd float %35, %59, !dbg !32
  %116 = fadd float %36, %60, !dbg !32
  %117 = fadd float %109, %77, !dbg !33
  %118 = fadd float %110, %78, !dbg !33
  %119 = fadd float %111, %79, !dbg !33
  %120 = fadd float %112, %80, !dbg !33
  %121 = fadd float %113, %81, !dbg !33
  %122 = fadd float %114, %82, !dbg !33
  %123 = fadd float %115, %83, !dbg !33
  %124 = fadd float %116, %84, !dbg !33
  %125 = fadd float %117, %101, !dbg !34
  %126 = fadd float %118, %102, !dbg !34
  %127 = fadd float %119, %103, !dbg !34
  %128 = fadd float %120, %104, !dbg !34
  %129 = fadd float %121, %105, !dbg !34
  %130 = fadd float %122, %106, !dbg !34
  %131 = fadd float %123, %107, !dbg !34
  %132 = fadd float %124, %108, !dbg !34
  %133 = sext i32 %9 to i64, !dbg !35
  %134 = getelementptr i16, ptr addrspace(1) %1, i64 %133, !dbg !35
  %135 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %125) #1, !dbg !36
  %136 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %126) #1, !dbg !36
  %137 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %127) #1, !dbg !36
  %138 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %128) #1, !dbg !36
  %139 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %129) #1, !dbg !36
  %140 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %130) #1, !dbg !36
  %141 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %131) #1, !dbg !36
  %142 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %132) #1, !dbg !36
  %143 = insertelement <2 x i16> poison, i16 %135, i64 0, !dbg !36
  %144 = insertelement <2 x i16> %143, i16 %136, i64 1, !dbg !36
  %145 = bitcast <2 x i16> %144 to i32, !dbg !36
  %146 = insertelement <2 x i16> poison, i16 %137, i64 0, !dbg !36
  %147 = insertelement <2 x i16> %146, i16 %138, i64 1, !dbg !36
  %148 = bitcast <2 x i16> %147 to i32, !dbg !36
  %149 = insertelement <2 x i16> poison, i16 %139, i64 0, !dbg !36
  %150 = insertelement <2 x i16> %149, i16 %140, i64 1, !dbg !36
  %151 = bitcast <2 x i16> %150 to i32, !dbg !36
  %152 = insertelement <2 x i16> poison, i16 %141, i64 0, !dbg !36
  %153 = insertelement <2 x i16> %152, i16 %142, i64 1, !dbg !36
  %154 = bitcast <2 x i16> %153 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %145, i32 %148, i32 %151, i32 %154, ptr addrspace(1) %134, i1 true) #1, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cncy3f3llonjckw5d5ga7xib5ran5oo7wxgtvsbpkjjprnl5g2jx.py", directory: "/auto/home/menuab/code/YNNtitan/torchinductor_menuab/nc")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 36, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 20, scope: !7)
!15 = !DILocation(line: 26, column: 40, scope: !7)
!16 = !DILocation(line: 26, column: 36, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 46, scope: !7)
!19 = !DILocation(line: 26, column: 55, scope: !7)
!20 = !DILocation(line: 27, column: 41, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 51, scope: !7)
!23 = !DILocation(line: 27, column: 60, scope: !7)
!24 = !DILocation(line: 28, column: 42, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 52, scope: !7)
!27 = !DILocation(line: 28, column: 61, scope: !7)
!28 = !DILocation(line: 29, column: 42, scope: !7)
!29 = !DILocation(line: 29, column: 30, scope: !7)
!30 = !DILocation(line: 29, column: 52, scope: !7)
!31 = !DILocation(line: 29, column: 61, scope: !7)
!32 = !DILocation(line: 30, column: 18, scope: !7)
!33 = !DILocation(line: 31, column: 18, scope: !7)
!34 = !DILocation(line: 32, column: 18, scope: !7)
!35 = !DILocation(line: 33, column: 25, scope: !7)
!36 = !DILocation(line: 33, column: 36, scope: !7)
!37 = !DILocation(line: 33, column: 4, scope: !7)
