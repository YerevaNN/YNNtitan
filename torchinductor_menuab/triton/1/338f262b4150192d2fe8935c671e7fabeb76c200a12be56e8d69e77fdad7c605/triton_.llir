; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = sext i32 %10 to i64, !dbg !14
  %12 = getelementptr i16, ptr addrspace(1) %1, i64 %11, !dbg !14
  %13 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %12, i1 true) #1, !dbg !15
  %14 = extractvalue { i32, i32, i32, i32 } %13, 0, !dbg !15
  %15 = extractvalue { i32, i32, i32, i32 } %13, 1, !dbg !15
  %16 = extractvalue { i32, i32, i32, i32 } %13, 2, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %13, 3, !dbg !15
  %18 = trunc i32 %14 to i16, !dbg !15
  %extelt.offset = lshr i32 %14, 16, !dbg !15
  %19 = trunc nuw i32 %extelt.offset to i16, !dbg !15
  %20 = trunc i32 %15 to i16, !dbg !15
  %extelt.offset1 = lshr i32 %15, 16, !dbg !15
  %21 = trunc nuw i32 %extelt.offset1 to i16, !dbg !15
  %22 = trunc i32 %16 to i16, !dbg !15
  %extelt.offset2 = lshr i32 %16, 16, !dbg !15
  %23 = trunc nuw i32 %extelt.offset2 to i16, !dbg !15
  %24 = trunc i32 %17 to i16, !dbg !15
  %extelt.offset3 = lshr i32 %17, 16, !dbg !15
  %25 = trunc nuw i32 %extelt.offset3 to i16, !dbg !15
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %18) #1, !dbg !16
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %19) #1, !dbg !16
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #1, !dbg !16
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #1, !dbg !16
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #1, !dbg !16
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #1, !dbg !16
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #1, !dbg !16
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #1, !dbg !16
  %34 = getelementptr i16, ptr addrspace(1) %2, i64 %11, !dbg !17
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !18
  %40 = trunc i32 %36 to i16, !dbg !18
  %extelt.offset4 = lshr i32 %36, 16, !dbg !18
  %41 = trunc nuw i32 %extelt.offset4 to i16, !dbg !18
  %42 = trunc i32 %37 to i16, !dbg !18
  %extelt.offset5 = lshr i32 %37, 16, !dbg !18
  %43 = trunc nuw i32 %extelt.offset5 to i16, !dbg !18
  %44 = trunc i32 %38 to i16, !dbg !18
  %extelt.offset6 = lshr i32 %38, 16, !dbg !18
  %45 = trunc nuw i32 %extelt.offset6 to i16, !dbg !18
  %46 = trunc i32 %39 to i16, !dbg !18
  %extelt.offset7 = lshr i32 %39, 16, !dbg !18
  %47 = trunc nuw i32 %extelt.offset7 to i16, !dbg !18
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #1, !dbg !19
  %49 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #1, !dbg !19
  %50 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #1, !dbg !19
  %51 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #1, !dbg !19
  %52 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #1, !dbg !19
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #1, !dbg !19
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #1, !dbg !19
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #1, !dbg !19
  %56 = getelementptr i16, ptr addrspace(1) %0, i64 %11, !dbg !20
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !21
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !21
  %62 = trunc i32 %58 to i16, !dbg !21
  %extelt.offset8 = lshr i32 %58, 16, !dbg !21
  %63 = trunc nuw i32 %extelt.offset8 to i16, !dbg !21
  %64 = trunc i32 %59 to i16, !dbg !21
  %extelt.offset9 = lshr i32 %59, 16, !dbg !21
  %65 = trunc nuw i32 %extelt.offset9 to i16, !dbg !21
  %66 = trunc i32 %60 to i16, !dbg !21
  %extelt.offset10 = lshr i32 %60, 16, !dbg !21
  %67 = trunc nuw i32 %extelt.offset10 to i16, !dbg !21
  %68 = trunc i32 %61 to i16, !dbg !21
  %extelt.offset11 = lshr i32 %61, 16, !dbg !21
  %69 = trunc nuw i32 %extelt.offset11 to i16, !dbg !21
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #1, !dbg !22
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #1, !dbg !22
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #1, !dbg !22
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #1, !dbg !22
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #1, !dbg !22
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #1, !dbg !22
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #1, !dbg !22
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #1, !dbg !22
  %78 = fadd float %26, %48, !dbg !23
  %79 = fadd float %27, %49, !dbg !23
  %80 = fadd float %28, %50, !dbg !23
  %81 = fadd float %29, %51, !dbg !23
  %82 = fadd float %30, %52, !dbg !23
  %83 = fadd float %31, %53, !dbg !23
  %84 = fadd float %32, %54, !dbg !23
  %85 = fadd float %33, %55, !dbg !23
  %86 = fadd float %78, %70, !dbg !24
  %87 = fadd float %79, %71, !dbg !24
  %88 = fadd float %80, %72, !dbg !24
  %89 = fadd float %81, %73, !dbg !24
  %90 = fadd float %82, %74, !dbg !24
  %91 = fadd float %83, %75, !dbg !24
  %92 = fadd float %84, %76, !dbg !24
  %93 = fadd float %85, %77, !dbg !24
  %94 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %86) #1, !dbg !25
  %95 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %87) #1, !dbg !25
  %96 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %88) #1, !dbg !25
  %97 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %89) #1, !dbg !25
  %98 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %90) #1, !dbg !25
  %99 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %91) #1, !dbg !25
  %100 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %92) #1, !dbg !25
  %101 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %93) #1, !dbg !25
  %102 = insertelement <2 x i16> poison, i16 %94, i64 0, !dbg !25
  %103 = insertelement <2 x i16> %102, i16 %95, i64 1, !dbg !25
  %104 = bitcast <2 x i16> %103 to i32, !dbg !25
  %105 = insertelement <2 x i16> poison, i16 %96, i64 0, !dbg !25
  %106 = insertelement <2 x i16> %105, i16 %97, i64 1, !dbg !25
  %107 = bitcast <2 x i16> %106 to i32, !dbg !25
  %108 = insertelement <2 x i16> poison, i16 %98, i64 0, !dbg !25
  %109 = insertelement <2 x i16> %108, i16 %99, i64 1, !dbg !25
  %110 = bitcast <2 x i16> %109 to i32, !dbg !25
  %111 = insertelement <2 x i16> poison, i16 %100, i64 0, !dbg !25
  %112 = insertelement <2 x i16> %111, i16 %101, i64 1, !dbg !25
  %113 = bitcast <2 x i16> %112 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %104, i32 %107, i32 %110, i32 %113, ptr addrspace(1) %56, i1 true) #1, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfcsyrya5foxqlusqjdamtzvu6mzfc4wtzbbkmbwdeqc7j2434f4.py", directory: "/auto/home/menuab/code/YNNtitan/torchinductor_menuab/fc")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 36, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 30, scope: !7)
!15 = !DILocation(line: 24, column: 35, scope: !7)
!16 = !DILocation(line: 24, column: 44, scope: !7)
!17 = !DILocation(line: 25, column: 30, scope: !7)
!18 = !DILocation(line: 25, column: 35, scope: !7)
!19 = !DILocation(line: 25, column: 44, scope: !7)
!20 = !DILocation(line: 26, column: 34, scope: !7)
!21 = !DILocation(line: 26, column: 39, scope: !7)
!22 = !DILocation(line: 26, column: 48, scope: !7)
!23 = !DILocation(line: 27, column: 18, scope: !7)
!24 = !DILocation(line: 28, column: 18, scope: !7)
!25 = !DILocation(line: 29, column: 39, scope: !7)
!26 = !DILocation(line: 29, column: 4, scope: !7)
