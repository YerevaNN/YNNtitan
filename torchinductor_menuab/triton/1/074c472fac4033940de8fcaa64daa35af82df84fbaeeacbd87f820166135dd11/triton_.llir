; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 3, !dbg !12
  %8 = and i32 %7, 1016, !dbg !12
  %9 = shl i32 %6, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %5, %8, !dbg !13
  %12 = or disjoint i32 %5, %10, !dbg !13
  %13 = or disjoint i32 %12, 512, !dbg !13
  %14 = sext i32 %11 to i64, !dbg !14
  %15 = getelementptr i16, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #2, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !15
  %extelt.offset1 = lshr i32 %18, 16, !dbg !15
  %extelt.offset2 = lshr i32 %19, 16, !dbg !15
  %21 = insertelement <4 x i32> poison, i32 %18, i64 0, !dbg !15
  %22 = insertelement <4 x i32> %21, i32 %extelt.offset1, i64 1, !dbg !15
  %23 = insertelement <4 x i32> %22, i32 %19, i64 2, !dbg !15
  %24 = insertelement <4 x i32> %23, i32 %extelt.offset2, i64 3, !dbg !15
  %25 = trunc <4 x i32> %24 to <4 x i16>, !dbg !15
  %26 = trunc i32 %20 to i16, !dbg !15
  %extelt.offset3 = lshr i32 %20, 16, !dbg !15
  %27 = trunc nuw i32 %extelt.offset3 to i16, !dbg !15
  %28 = and i32 %6, 127, !dbg !16
  %29 = shl nuw nsw i32 %28, 3, !dbg !16
  %30 = zext nneg i32 %29 to i64, !dbg !16
  %31 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %30, !dbg !16
  %32 = insertelement <4 x i32> poison, i32 %17, i64 0, !dbg !16
  %33 = bitcast <4 x i32> %32 to <8 x i16>, !dbg !16
  %34 = shufflevector <4 x i16> %25, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !16
  %35 = shufflevector <8 x i16> %33, <8 x i16> %34, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !16
  %36 = insertelement <8 x i16> %35, i16 %26, i64 6, !dbg !16
  %37 = insertelement <8 x i16> %36, i16 %27, i64 7, !dbg !16
  store <8 x i16> %37, ptr addrspace(3) %31, align 16, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %38 = shl nuw nsw i32 %28, 2, !dbg !16
  %39 = zext nneg i32 %38 to i64, !dbg !16
  %40 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %39, !dbg !16
  %41 = load i16, ptr addrspace(3) %40, align 8, !dbg !16
  %42 = getelementptr inbounds i8, ptr addrspace(3) %40, i64 2, !dbg !16
  %43 = load i16, ptr addrspace(3) %42, align 2, !dbg !16
  %44 = getelementptr inbounds i8, ptr addrspace(3) %40, i64 4, !dbg !16
  %45 = load i16, ptr addrspace(3) %44, align 4, !dbg !16
  %46 = getelementptr inbounds i8, ptr addrspace(3) %40, i64 6, !dbg !16
  %47 = load i16, ptr addrspace(3) %46, align 2, !dbg !16
  %48 = or disjoint i32 %38, 512, !dbg !16
  %49 = zext nneg i32 %48 to i64, !dbg !16
  %50 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %49, !dbg !16
  %51 = load i16, ptr addrspace(3) %50, align 8, !dbg !16
  %52 = getelementptr inbounds i8, ptr addrspace(3) %50, i64 2, !dbg !16
  %53 = load i16, ptr addrspace(3) %52, align 2, !dbg !16
  %54 = getelementptr inbounds i8, ptr addrspace(3) %50, i64 4, !dbg !16
  %55 = load i16, ptr addrspace(3) %54, align 4, !dbg !16
  %56 = getelementptr inbounds i8, ptr addrspace(3) %50, i64 6, !dbg !16
  %57 = load i16, ptr addrspace(3) %56, align 2, !dbg !16
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #2, !dbg !16
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #2, !dbg !16
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #2, !dbg !16
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #2, !dbg !16
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #2, !dbg !16
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #2, !dbg !16
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #2, !dbg !16
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #2, !dbg !16
  %66 = sext i32 %12 to i64, !dbg !17
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !17
  %68 = sext i32 %13 to i64, !dbg !17
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !17
  %70 = bitcast float %58 to i32, !dbg !18
  %71 = bitcast float %59 to i32, !dbg !18
  %72 = bitcast float %60 to i32, !dbg !18
  %73 = bitcast float %61 to i32, !dbg !18
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %70, i32 %71, i32 %72, i32 %73, ptr addrspace(1) %67, i1 true) #2, !dbg !18
  %74 = bitcast float %62 to i32, !dbg !18
  %75 = bitcast float %63 to i32, !dbg !18
  %76 = bitcast float %64 to i32, !dbg !18
  %77 = bitcast float %65 to i32, !dbg !18
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %74, i32 %75, i32 %76, i32 %77, ptr addrspace(1) %69, i1 true) #2, !dbg !18
  ret void, !dbg !19
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxdrlih7n4xmq7tve7fwzouoqlkbvzebsxsovbdp5m7t2bpeznde.py", directory: "/auto/home/menuab/code/YNNtitan/torchinductor_menuab/xd")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 36, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 30, scope: !7)
!15 = !DILocation(line: 24, column: 35, scope: !7)
!16 = !DILocation(line: 24, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 25, scope: !7)
!18 = !DILocation(line: 26, column: 36, scope: !7)
!19 = !DILocation(line: 26, column: 4, scope: !7)
