; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = shl i32 %11, 2, !dbg !11
  %14 = and i32 %13, 1020, !dbg !11
  %15 = shl i32 %10, 11, !dbg !12
  %16 = or disjoint i32 %14, %15, !dbg !13
  %17 = sext i32 %16 to i64, !dbg !14
  %18 = getelementptr i16, ptr addrspace(1) %1, i64 %17, !dbg !14
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !15
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !15
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !15
  %22 = trunc i32 %20 to i16, !dbg !15
  %extelt.offset13 = lshr i32 %20, 16, !dbg !15
  %23 = trunc nuw i32 %extelt.offset13 to i16, !dbg !15
  %24 = trunc i32 %21 to i16, !dbg !15
  %extelt.offset14 = lshr i32 %21, 16, !dbg !15
  %25 = trunc nuw i32 %extelt.offset14 to i16, !dbg !15
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #3, !dbg !16
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #3, !dbg !16
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #3, !dbg !16
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #3, !dbg !16
  %30 = getelementptr i16, ptr addrspace(1) %2, i64 %17, !dbg !17
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !18
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !18
  %34 = trunc i32 %32 to i16, !dbg !18
  %extelt.offset15 = lshr i32 %32, 16, !dbg !18
  %35 = trunc nuw i32 %extelt.offset15 to i16, !dbg !18
  %36 = trunc i32 %33 to i16, !dbg !18
  %extelt.offset16 = lshr i32 %33, 16, !dbg !18
  %37 = trunc nuw i32 %extelt.offset16 to i16, !dbg !18
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #3, !dbg !19
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #3, !dbg !19
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #3, !dbg !19
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #3, !dbg !19
  %42 = getelementptr i16, ptr addrspace(1) %3, i64 %17, !dbg !20
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !21
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !21
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !21
  %46 = trunc i32 %44 to i16, !dbg !21
  %extelt.offset17 = lshr i32 %44, 16, !dbg !21
  %47 = trunc nuw i32 %extelt.offset17 to i16, !dbg !21
  %48 = trunc i32 %45 to i16, !dbg !21
  %extelt.offset18 = lshr i32 %45, 16, !dbg !21
  %49 = trunc nuw i32 %extelt.offset18 to i16, !dbg !21
  %50 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #3, !dbg !22
  %51 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #3, !dbg !22
  %52 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %48) #3, !dbg !22
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #3, !dbg !22
  %54 = zext nneg i32 %14 to i64, !dbg !23
  %55 = getelementptr i16, ptr addrspace(1) %4, i64 %54, !dbg !23
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !24
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !24
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !24
  %59 = trunc i32 %57 to i16, !dbg !24
  %extelt.offset19 = lshr i32 %57, 16, !dbg !24
  %60 = trunc nuw i32 %extelt.offset19 to i16, !dbg !24
  %61 = trunc i32 %58 to i16, !dbg !24
  %extelt.offset20 = lshr i32 %58, 16, !dbg !24
  %62 = trunc nuw i32 %extelt.offset20 to i16, !dbg !24
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #3, !dbg !25
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #3, !dbg !25
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #3, !dbg !25
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #3, !dbg !25
  %67 = getelementptr i16, ptr addrspace(1) %5, i64 %17, !dbg !26
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !27
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !27
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !27
  %71 = trunc i32 %69 to i16, !dbg !27
  %extelt.offset21 = lshr i32 %69, 16, !dbg !27
  %72 = trunc nuw i32 %extelt.offset21 to i16, !dbg !27
  %73 = trunc i32 %70 to i16, !dbg !27
  %extelt.offset22 = lshr i32 %70, 16, !dbg !27
  %74 = trunc nuw i32 %extelt.offset22 to i16, !dbg !27
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #3, !dbg !28
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #3, !dbg !28
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #3, !dbg !28
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #3, !dbg !28
  %79 = or disjoint i32 %14, 1024, !dbg !29
  %80 = or disjoint i32 %79, %15, !dbg !13
  %81 = sext i32 %80 to i64, !dbg !14
  %82 = getelementptr i16, ptr addrspace(1) %1, i64 %81, !dbg !14
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %82, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !15
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !15
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !15
  %86 = trunc i32 %84 to i16, !dbg !15
  %extelt.offset13.1 = lshr i32 %84, 16, !dbg !15
  %87 = trunc nuw i32 %extelt.offset13.1 to i16, !dbg !15
  %88 = trunc i32 %85 to i16, !dbg !15
  %extelt.offset14.1 = lshr i32 %85, 16, !dbg !15
  %89 = trunc nuw i32 %extelt.offset14.1 to i16, !dbg !15
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #3, !dbg !16
  %91 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #3, !dbg !16
  %92 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #3, !dbg !16
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #3, !dbg !16
  %94 = getelementptr i16, ptr addrspace(1) %2, i64 %81, !dbg !17
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %94, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %96 = extractvalue { i32, i32 } %95, 0, !dbg !18
  %97 = extractvalue { i32, i32 } %95, 1, !dbg !18
  %98 = trunc i32 %96 to i16, !dbg !18
  %extelt.offset15.1 = lshr i32 %96, 16, !dbg !18
  %99 = trunc nuw i32 %extelt.offset15.1 to i16, !dbg !18
  %100 = trunc i32 %97 to i16, !dbg !18
  %extelt.offset16.1 = lshr i32 %97, 16, !dbg !18
  %101 = trunc nuw i32 %extelt.offset16.1 to i16, !dbg !18
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %98) #3, !dbg !19
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #3, !dbg !19
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #3, !dbg !19
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #3, !dbg !19
  %106 = getelementptr i16, ptr addrspace(1) %3, i64 %81, !dbg !20
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %106, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !21
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !21
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !21
  %110 = trunc i32 %108 to i16, !dbg !21
  %extelt.offset17.1 = lshr i32 %108, 16, !dbg !21
  %111 = trunc nuw i32 %extelt.offset17.1 to i16, !dbg !21
  %112 = trunc i32 %109 to i16, !dbg !21
  %extelt.offset18.1 = lshr i32 %109, 16, !dbg !21
  %113 = trunc nuw i32 %extelt.offset18.1 to i16, !dbg !21
  %114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %110) #3, !dbg !22
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %111) #3, !dbg !22
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %112) #3, !dbg !22
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #3, !dbg !22
  %118 = zext nneg i32 %79 to i64, !dbg !23
  %119 = getelementptr i16, ptr addrspace(1) %4, i64 %118, !dbg !23
  %120 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %119, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !24
  %121 = extractvalue { i32, i32 } %120, 0, !dbg !24
  %122 = extractvalue { i32, i32 } %120, 1, !dbg !24
  %123 = trunc i32 %121 to i16, !dbg !24
  %extelt.offset19.1 = lshr i32 %121, 16, !dbg !24
  %124 = trunc nuw i32 %extelt.offset19.1 to i16, !dbg !24
  %125 = trunc i32 %122 to i16, !dbg !24
  %extelt.offset20.1 = lshr i32 %122, 16, !dbg !24
  %126 = trunc nuw i32 %extelt.offset20.1 to i16, !dbg !24
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %123) #3, !dbg !25
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %124) #3, !dbg !25
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %125) #3, !dbg !25
  %130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %126) #3, !dbg !25
  %131 = getelementptr i16, ptr addrspace(1) %5, i64 %81, !dbg !26
  %132 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %131, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !27
  %133 = extractvalue { i32, i32 } %132, 0, !dbg !27
  %134 = extractvalue { i32, i32 } %132, 1, !dbg !27
  %135 = trunc i32 %133 to i16, !dbg !27
  %extelt.offset21.1 = lshr i32 %133, 16, !dbg !27
  %136 = trunc nuw i32 %extelt.offset21.1 to i16, !dbg !27
  %137 = trunc i32 %134 to i16, !dbg !27
  %extelt.offset22.1 = lshr i32 %134, 16, !dbg !27
  %138 = trunc nuw i32 %extelt.offset22.1 to i16, !dbg !27
  %139 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %135) #3, !dbg !28
  %140 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %136) #3, !dbg !28
  %141 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %137) #3, !dbg !28
  %142 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %138) #3, !dbg !28
  %143 = insertelement <2 x float> poison, float %26, i64 0, !dbg !30
  %144 = insertelement <2 x float> %143, float %27, i64 1, !dbg !30
  %145 = insertelement <2 x float> poison, float %38, i64 0, !dbg !30
  %146 = insertelement <2 x float> %145, float %39, i64 1, !dbg !30
  %147 = fadd <2 x float> %144, %146, !dbg !30
  %148 = insertelement <2 x float> poison, float %50, i64 0, !dbg !31
  %149 = insertelement <2 x float> %148, float %51, i64 1, !dbg !31
  %150 = fadd <2 x float> %147, %149, !dbg !31
  %151 = insertelement <2 x float> poison, float %63, i64 0, !dbg !32
  %152 = insertelement <2 x float> %151, float %64, i64 1, !dbg !32
  %153 = fmul <2 x float> %150, %152, !dbg !32
  %154 = insertelement <2 x float> poison, float %75, i64 0, !dbg !33
  %155 = insertelement <2 x float> %154, float %76, i64 1, !dbg !33
  %156 = fmul <2 x float> %153, %155, !dbg !33
  %157 = fadd <2 x float> %156, zeroinitializer, !dbg !34
  %158 = insertelement <2 x float> poison, float %90, i64 0, !dbg !30
  %159 = insertelement <2 x float> %158, float %91, i64 1, !dbg !30
  %160 = insertelement <2 x float> poison, float %102, i64 0, !dbg !30
  %161 = insertelement <2 x float> %160, float %103, i64 1, !dbg !30
  %162 = fadd <2 x float> %159, %161, !dbg !30
  %163 = insertelement <2 x float> poison, float %114, i64 0, !dbg !31
  %164 = insertelement <2 x float> %163, float %115, i64 1, !dbg !31
  %165 = fadd <2 x float> %162, %164, !dbg !31
  %166 = insertelement <2 x float> poison, float %127, i64 0, !dbg !32
  %167 = insertelement <2 x float> %166, float %128, i64 1, !dbg !32
  %168 = fmul <2 x float> %165, %167, !dbg !32
  %169 = insertelement <2 x float> poison, float %139, i64 0, !dbg !33
  %170 = insertelement <2 x float> %169, float %140, i64 1, !dbg !33
  %171 = fmul <2 x float> %168, %170, !dbg !33
  %172 = fadd <2 x float> %157, %171, !dbg !34
  %173 = insertelement <2 x float> poison, float %29, i64 0, !dbg !30
  %174 = insertelement <2 x float> %173, float %28, i64 1, !dbg !30
  %175 = insertelement <2 x float> poison, float %41, i64 0, !dbg !30
  %176 = insertelement <2 x float> %175, float %40, i64 1, !dbg !30
  %177 = fadd <2 x float> %174, %176, !dbg !30
  %178 = insertelement <2 x float> poison, float %53, i64 0, !dbg !31
  %179 = insertelement <2 x float> %178, float %52, i64 1, !dbg !31
  %180 = fadd <2 x float> %177, %179, !dbg !31
  %181 = insertelement <2 x float> poison, float %66, i64 0, !dbg !32
  %182 = insertelement <2 x float> %181, float %65, i64 1, !dbg !32
  %183 = fmul <2 x float> %180, %182, !dbg !32
  %184 = insertelement <2 x float> poison, float %78, i64 0, !dbg !33
  %185 = insertelement <2 x float> %184, float %77, i64 1, !dbg !33
  %186 = fmul <2 x float> %183, %185, !dbg !33
  %187 = fadd <2 x float> %186, zeroinitializer, !dbg !34
  %188 = insertelement <2 x float> poison, float %93, i64 0, !dbg !30
  %189 = insertelement <2 x float> %188, float %92, i64 1, !dbg !30
  %190 = insertelement <2 x float> poison, float %105, i64 0, !dbg !30
  %191 = insertelement <2 x float> %190, float %104, i64 1, !dbg !30
  %192 = fadd <2 x float> %189, %191, !dbg !30
  %193 = insertelement <2 x float> poison, float %117, i64 0, !dbg !31
  %194 = insertelement <2 x float> %193, float %116, i64 1, !dbg !31
  %195 = fadd <2 x float> %192, %194, !dbg !31
  %196 = insertelement <2 x float> poison, float %130, i64 0, !dbg !32
  %197 = insertelement <2 x float> %196, float %129, i64 1, !dbg !32
  %198 = fmul <2 x float> %195, %197, !dbg !32
  %199 = insertelement <2 x float> poison, float %142, i64 0, !dbg !33
  %200 = insertelement <2 x float> %199, float %141, i64 1, !dbg !33
  %201 = fmul <2 x float> %198, %200, !dbg !33
  %202 = fadd <2 x float> %187, %201, !dbg !34
  %203 = lshr i32 %11, 5, !dbg !11
  %shift = shufflevector <2 x float> %172, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %204 = fadd <2 x float> %172, %shift, !dbg !35
  %shift26 = shufflevector <2 x float> %202, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %205 = fadd <2 x float> %shift26, %204, !dbg !35
  %206 = fadd <2 x float> %202, %205, !dbg !35
  %207 = extractelement <2 x float> %206, i64 0, !dbg !35
  %208 = bitcast float %207 to i32, !dbg !40
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 16, i32 31), !dbg !40
  %210 = bitcast i32 %209 to float, !dbg !40
  %211 = fadd float %207, %210, !dbg !35
  %212 = bitcast float %211 to i32, !dbg !40
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 8, i32 31), !dbg !40
  %214 = bitcast i32 %213 to float, !dbg !40
  %215 = fadd float %211, %214, !dbg !35
  %216 = bitcast float %215 to i32, !dbg !40
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 4, i32 31), !dbg !40
  %218 = bitcast i32 %217 to float, !dbg !40
  %219 = fadd float %215, %218, !dbg !35
  %220 = bitcast float %219 to i32, !dbg !40
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 2, i32 31), !dbg !40
  %222 = bitcast i32 %221 to float, !dbg !40
  %223 = fadd float %219, %222, !dbg !35
  %224 = bitcast float %223 to i32, !dbg !40
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 1, i32 31), !dbg !40
  %226 = bitcast i32 %225 to float, !dbg !40
  %227 = fadd float %223, %226, !dbg !35
  %228 = icmp eq i32 %12, 0, !dbg !40
  %229 = and i32 %203, 7, !dbg !40
  %230 = zext nneg i32 %229 to i64, !dbg !40
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i64 %230, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, float %227, i1 %228) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %232 = icmp slt i32 %11, 8, !dbg !40
  %233 = sext i32 %11 to i64, !dbg !40
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i64 %233, !dbg !40
  %235 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %234, i1 %232) #3, !dbg !40
  %236 = bitcast float %235 to i32, !dbg !40
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 4, i32 31), !dbg !40
  %238 = bitcast i32 %237 to float, !dbg !40
  %239 = fadd float %235, %238, !dbg !35
  %240 = bitcast float %239 to i32, !dbg !40
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 2, i32 31), !dbg !40
  %242 = bitcast i32 %241 to float, !dbg !40
  %243 = fadd float %239, %242, !dbg !35
  %244 = bitcast float %243 to i32, !dbg !40
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 1, i32 31), !dbg !40
  %246 = bitcast i32 %245 to float, !dbg !40
  %247 = fadd float %243, %246, !dbg !35
  %248 = and i32 %11, 7, !dbg !40
  %249 = icmp eq i32 %248, 0, !dbg !40
  %250 = and i1 %232, %249, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, float %247, i1 %250) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %251 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %252 = sext i32 %10 to i64, !dbg !41
  %253 = getelementptr float, ptr addrspace(1) %6, i64 %252, !dbg !41
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 true) #3, !dbg !42
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 true) #3, !dbg !42
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 true) #3, !dbg !42
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 true) #3, !dbg !42
  %258 = bitcast i32 %257 to float, !dbg !42
  %259 = fmul float %251, -5.000000e-01, !dbg !43
  %260 = fmul float %258, %258, !dbg !44
  %261 = fmul float %260, %258, !dbg !45
  %262 = fmul float %259, %261, !dbg !46
  %263 = fmul float %262, 0x3F40000000000000, !dbg !47
  br label %264, !dbg !48

264:                                              ; preds = %9, %264
  %265 = phi i1 [ true, %9 ], [ false, %264 ]
  %266 = phi i32 [ 0, %9 ], [ 1024, %264 ]
  %267 = or disjoint i32 %266, %14, !dbg !49
  %268 = or disjoint i32 %267, %15, !dbg !50
  %269 = sext i32 %268 to i64, !dbg !51
  %270 = getelementptr i16, ptr addrspace(1) %0, i64 %269, !dbg !51
  %271 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %270, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !52
  %272 = extractvalue { i32, i32 } %271, 0, !dbg !52
  %273 = extractvalue { i32, i32 } %271, 1, !dbg !52
  %274 = trunc i32 %272 to i16, !dbg !52
  %extelt.offset = lshr i32 %272, 16, !dbg !52
  %275 = trunc nuw i32 %extelt.offset to i16, !dbg !52
  %276 = trunc i32 %273 to i16, !dbg !52
  %extelt.offset2 = lshr i32 %273, 16, !dbg !52
  %277 = trunc nuw i32 %extelt.offset2 to i16, !dbg !52
  %278 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %274) #3, !dbg !53
  %279 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %275) #3, !dbg !53
  %280 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %276) #3, !dbg !53
  %281 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %277) #3, !dbg !53
  %282 = getelementptr i16, ptr addrspace(1) %1, i64 %269, !dbg !54
  %283 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %282, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !55
  %284 = extractvalue { i32, i32 } %283, 0, !dbg !55
  %285 = extractvalue { i32, i32 } %283, 1, !dbg !55
  %286 = trunc i32 %284 to i16, !dbg !55
  %extelt.offset3 = lshr i32 %284, 16, !dbg !55
  %287 = trunc nuw i32 %extelt.offset3 to i16, !dbg !55
  %288 = trunc i32 %285 to i16, !dbg !55
  %extelt.offset4 = lshr i32 %285, 16, !dbg !55
  %289 = trunc nuw i32 %extelt.offset4 to i16, !dbg !55
  %290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #3, !dbg !56
  %291 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %287) #3, !dbg !56
  %292 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %288) #3, !dbg !56
  %293 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %289) #3, !dbg !56
  %294 = getelementptr i16, ptr addrspace(1) %2, i64 %269, !dbg !57
  %295 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %294, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !58
  %296 = extractvalue { i32, i32 } %295, 0, !dbg !58
  %297 = extractvalue { i32, i32 } %295, 1, !dbg !58
  %298 = trunc i32 %296 to i16, !dbg !58
  %extelt.offset5 = lshr i32 %296, 16, !dbg !58
  %299 = trunc nuw i32 %extelt.offset5 to i16, !dbg !58
  %300 = trunc i32 %297 to i16, !dbg !58
  %extelt.offset6 = lshr i32 %297, 16, !dbg !58
  %301 = trunc nuw i32 %extelt.offset6 to i16, !dbg !58
  %302 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %298) #3, !dbg !59
  %303 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %299) #3, !dbg !59
  %304 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %300) #3, !dbg !59
  %305 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %301) #3, !dbg !59
  %306 = getelementptr i16, ptr addrspace(1) %3, i64 %269, !dbg !60
  %307 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %306, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !61
  %308 = extractvalue { i32, i32 } %307, 0, !dbg !61
  %309 = extractvalue { i32, i32 } %307, 1, !dbg !61
  %310 = trunc i32 %308 to i16, !dbg !61
  %extelt.offset7 = lshr i32 %308, 16, !dbg !61
  %311 = trunc nuw i32 %extelt.offset7 to i16, !dbg !61
  %312 = trunc i32 %309 to i16, !dbg !61
  %extelt.offset8 = lshr i32 %309, 16, !dbg !61
  %313 = trunc nuw i32 %extelt.offset8 to i16, !dbg !61
  %314 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %310) #3, !dbg !62
  %315 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %311) #3, !dbg !62
  %316 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %312) #3, !dbg !62
  %317 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %313) #3, !dbg !62
  %318 = zext nneg i32 %267 to i64, !dbg !63
  %319 = getelementptr i16, ptr addrspace(1) %4, i64 %318, !dbg !63
  %320 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %319, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !64
  %321 = extractvalue { i32, i32 } %320, 0, !dbg !64
  %322 = extractvalue { i32, i32 } %320, 1, !dbg !64
  %323 = trunc i32 %321 to i16, !dbg !64
  %extelt.offset9 = lshr i32 %321, 16, !dbg !64
  %324 = trunc nuw i32 %extelt.offset9 to i16, !dbg !64
  %325 = trunc i32 %322 to i16, !dbg !64
  %extelt.offset10 = lshr i32 %322, 16, !dbg !64
  %326 = trunc nuw i32 %extelt.offset10 to i16, !dbg !64
  %327 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %323) #3, !dbg !65
  %328 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %324) #3, !dbg !65
  %329 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %325) #3, !dbg !65
  %330 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %326) #3, !dbg !65
  %331 = getelementptr i16, ptr addrspace(1) %5, i64 %269, !dbg !66
  %332 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %331, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !67
  %333 = extractvalue { i32, i32 } %332, 0, !dbg !67
  %334 = extractvalue { i32, i32 } %332, 1, !dbg !67
  %335 = trunc i32 %333 to i16, !dbg !67
  %extelt.offset11 = lshr i32 %333, 16, !dbg !67
  %336 = trunc nuw i32 %extelt.offset11 to i16, !dbg !67
  %337 = trunc i32 %334 to i16, !dbg !67
  %extelt.offset12 = lshr i32 %334, 16, !dbg !67
  %338 = trunc nuw i32 %extelt.offset12 to i16, !dbg !67
  %339 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %335) #3, !dbg !68
  %340 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %336) #3, !dbg !68
  %341 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #3, !dbg !68
  %342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %338) #3, !dbg !68
  %343 = fadd float %290, %302, !dbg !69
  %344 = fadd float %291, %303, !dbg !69
  %345 = fadd float %292, %304, !dbg !69
  %346 = fadd float %293, %305, !dbg !69
  %347 = fadd float %343, %314, !dbg !70
  %348 = fadd float %344, %315, !dbg !70
  %349 = fadd float %345, %316, !dbg !70
  %350 = fadd float %346, %317, !dbg !70
  %351 = fmul float %347, %327, !dbg !71
  %352 = fmul float %348, %328, !dbg !71
  %353 = fmul float %349, %329, !dbg !71
  %354 = fmul float %350, %330, !dbg !71
  %355 = fmul float %351, %258, !dbg !72
  %356 = fmul float %352, %258, !dbg !72
  %357 = fmul float %353, %258, !dbg !72
  %358 = fmul float %354, %258, !dbg !72
  %359 = fmul float %339, 2.000000e+00, !dbg !73
  %360 = fmul float %340, 2.000000e+00, !dbg !73
  %361 = fmul float %341, 2.000000e+00, !dbg !73
  %362 = fmul float %342, 2.000000e+00, !dbg !73
  %363 = fmul float %263, %359, !dbg !74
  %364 = fmul float %263, %360, !dbg !74
  %365 = fmul float %263, %361, !dbg !74
  %366 = fmul float %263, %362, !dbg !74
  %367 = fadd float %355, %363, !dbg !75
  %368 = fadd float %356, %364, !dbg !75
  %369 = fadd float %357, %365, !dbg !75
  %370 = fadd float %358, %366, !dbg !75
  %371 = fadd float %278, %367, !dbg !76
  %372 = fadd float %279, %368, !dbg !76
  %373 = fadd float %280, %369, !dbg !76
  %374 = fadd float %281, %370, !dbg !76
  %375 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %371) #3, !dbg !77
  %376 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %372) #3, !dbg !77
  %377 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %373) #3, !dbg !77
  %378 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %374) #3, !dbg !77
  %379 = insertelement <2 x i16> poison, i16 %375, i64 0, !dbg !77
  %380 = insertelement <2 x i16> %379, i16 %376, i64 1, !dbg !77
  %381 = bitcast <2 x i16> %380 to i32, !dbg !77
  %382 = insertelement <2 x i16> poison, i16 %377, i64 0, !dbg !77
  %383 = insertelement <2 x i16> %382, i16 %378, i64 1, !dbg !77
  %384 = bitcast <2 x i16> %383 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %381, i32 %384, ptr addrspace(1) %270, i1 true) #3, !dbg !77
  br i1 %265, label %264, label %385, !dbg !48

385:                                              ; preds = %264
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c42i3aku7hkna45ufrkherhy5jur3bxcehuzwaskkjlfy7jkvnby.py", directory: "/auto/home/menuab/code/YNNtitan/torchinductor_menuab/42")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 51, scope: !7)
!19 = !DILocation(line: 32, column: 102, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 51, scope: !7)
!22 = !DILocation(line: 33, column: 102, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 90, scope: !7)
!26 = !DILocation(line: 35, column: 34, scope: !7)
!27 = !DILocation(line: 35, column: 51, scope: !7)
!28 = !DILocation(line: 35, column: 102, scope: !7)
!29 = !DILocation(line: 28, column: 27, scope: !7)
!30 = !DILocation(line: 36, column: 22, scope: !7)
!31 = !DILocation(line: 37, column: 22, scope: !7)
!32 = !DILocation(line: 38, column: 22, scope: !7)
!33 = !DILocation(line: 41, column: 23, scope: !7)
!34 = !DILocation(line: 43, column: 25, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/auto/home/menuab/miniforge3/envs/titan/lib/python3.10/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!39 = !DILocation(line: 45, column: 27, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 46, column: 31, scope: !7)
!42 = !DILocation(line: 46, column: 36, scope: !7)
!43 = !DILocation(line: 63, column: 24, scope: !7)
!44 = !DILocation(line: 64, column: 24, scope: !7)
!45 = !DILocation(line: 65, column: 24, scope: !7)
!46 = !DILocation(line: 66, column: 24, scope: !7)
!47 = !DILocation(line: 68, column: 24, scope: !7)
!48 = !DILocation(line: 47, column: 36, scope: !7)
!49 = !DILocation(line: 48, column: 27, scope: !7)
!50 = !DILocation(line: 51, column: 45, scope: !7)
!51 = !DILocation(line: 51, column: 39, scope: !7)
!52 = !DILocation(line: 51, column: 56, scope: !7)
!53 = !DILocation(line: 51, column: 108, scope: !7)
!54 = !DILocation(line: 52, column: 35, scope: !7)
!55 = !DILocation(line: 52, column: 52, scope: !7)
!56 = !DILocation(line: 52, column: 104, scope: !7)
!57 = !DILocation(line: 53, column: 35, scope: !7)
!58 = !DILocation(line: 53, column: 52, scope: !7)
!59 = !DILocation(line: 53, column: 104, scope: !7)
!60 = !DILocation(line: 54, column: 35, scope: !7)
!61 = !DILocation(line: 54, column: 52, scope: !7)
!62 = !DILocation(line: 54, column: 104, scope: !7)
!63 = !DILocation(line: 55, column: 35, scope: !7)
!64 = !DILocation(line: 55, column: 40, scope: !7)
!65 = !DILocation(line: 55, column: 91, scope: !7)
!66 = !DILocation(line: 56, column: 35, scope: !7)
!67 = !DILocation(line: 56, column: 52, scope: !7)
!68 = !DILocation(line: 56, column: 104, scope: !7)
!69 = !DILocation(line: 57, column: 24, scope: !7)
!70 = !DILocation(line: 58, column: 24, scope: !7)
!71 = !DILocation(line: 59, column: 24, scope: !7)
!72 = !DILocation(line: 61, column: 24, scope: !7)
!73 = !DILocation(line: 71, column: 24, scope: !7)
!74 = !DILocation(line: 72, column: 24, scope: !7)
!75 = !DILocation(line: 73, column: 24, scope: !7)
!76 = !DILocation(line: 75, column: 24, scope: !7)
!77 = !DILocation(line: 76, column: 56, scope: !7)
!78 = !DILocation(line: 47, column: 4, scope: !7)
