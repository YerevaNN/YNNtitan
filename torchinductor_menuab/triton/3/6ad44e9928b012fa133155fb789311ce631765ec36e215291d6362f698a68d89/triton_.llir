; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = shl i32 %12, 2, !dbg !11
  %15 = and i32 %14, 1020, !dbg !11
  %16 = shl i32 %11, 11, !dbg !12
  %17 = or disjoint i32 %15, %16, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr i16, ptr addrspace(1) %0, i64 %18, !dbg !14
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !15
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !15
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !15
  %23 = trunc i32 %21 to i16, !dbg !15
  %extelt.offset13 = lshr i32 %21, 16, !dbg !15
  %24 = trunc nuw i32 %extelt.offset13 to i16, !dbg !15
  %25 = trunc i32 %22 to i16, !dbg !15
  %extelt.offset14 = lshr i32 %22, 16, !dbg !15
  %26 = trunc nuw i32 %extelt.offset14 to i16, !dbg !15
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #3, !dbg !16
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #3, !dbg !16
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #3, !dbg !16
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #3, !dbg !16
  %31 = getelementptr i16, ptr addrspace(1) %1, i64 %18, !dbg !17
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !18
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !18
  %35 = trunc i32 %33 to i16, !dbg !18
  %extelt.offset15 = lshr i32 %33, 16, !dbg !18
  %36 = trunc nuw i32 %extelt.offset15 to i16, !dbg !18
  %37 = trunc i32 %34 to i16, !dbg !18
  %extelt.offset16 = lshr i32 %34, 16, !dbg !18
  %38 = trunc nuw i32 %extelt.offset16 to i16, !dbg !18
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #3, !dbg !19
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #3, !dbg !19
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #3, !dbg !19
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #3, !dbg !19
  %43 = zext nneg i32 %15 to i64, !dbg !20
  %44 = getelementptr i16, ptr addrspace(1) %2, i64 %43, !dbg !20
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !21
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !21
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !21
  %48 = trunc i32 %46 to i16, !dbg !21
  %extelt.offset17 = lshr i32 %46, 16, !dbg !21
  %49 = trunc nuw i32 %extelt.offset17 to i16, !dbg !21
  %50 = trunc i32 %47 to i16, !dbg !21
  %extelt.offset18 = lshr i32 %47, 16, !dbg !21
  %51 = trunc nuw i32 %extelt.offset18 to i16, !dbg !21
  %52 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %48) #3, !dbg !22
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #3, !dbg !22
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #3, !dbg !22
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #3, !dbg !22
  %56 = getelementptr i16, ptr addrspace(1) %3, i64 %18, !dbg !23
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !24
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !24
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !24
  %60 = trunc i32 %58 to i16, !dbg !24
  %extelt.offset19 = lshr i32 %58, 16, !dbg !24
  %61 = trunc nuw i32 %extelt.offset19 to i16, !dbg !24
  %62 = trunc i32 %59 to i16, !dbg !24
  %extelt.offset20 = lshr i32 %59, 16, !dbg !24
  %63 = trunc nuw i32 %extelt.offset20 to i16, !dbg !24
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #3, !dbg !25
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #3, !dbg !25
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #3, !dbg !25
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #3, !dbg !25
  %68 = getelementptr i16, ptr addrspace(1) %4, i64 %18, !dbg !26
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !27
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !27
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !27
  %72 = trunc i32 %70 to i16, !dbg !27
  %extelt.offset21 = lshr i32 %70, 16, !dbg !27
  %73 = trunc nuw i32 %extelt.offset21 to i16, !dbg !27
  %74 = trunc i32 %71 to i16, !dbg !27
  %extelt.offset22 = lshr i32 %71, 16, !dbg !27
  %75 = trunc nuw i32 %extelt.offset22 to i16, !dbg !27
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #3, !dbg !28
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #3, !dbg !28
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #3, !dbg !28
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #3, !dbg !28
  %80 = or disjoint i32 %15, 1024, !dbg !29
  %81 = or disjoint i32 %80, %16, !dbg !13
  %82 = sext i32 %81 to i64, !dbg !14
  %83 = getelementptr i16, ptr addrspace(1) %0, i64 %82, !dbg !14
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %83, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !15
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !15
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !15
  %87 = trunc i32 %85 to i16, !dbg !15
  %extelt.offset13.1 = lshr i32 %85, 16, !dbg !15
  %88 = trunc nuw i32 %extelt.offset13.1 to i16, !dbg !15
  %89 = trunc i32 %86 to i16, !dbg !15
  %extelt.offset14.1 = lshr i32 %86, 16, !dbg !15
  %90 = trunc nuw i32 %extelt.offset14.1 to i16, !dbg !15
  %91 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #3, !dbg !16
  %92 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #3, !dbg !16
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #3, !dbg !16
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #3, !dbg !16
  %95 = getelementptr i16, ptr addrspace(1) %1, i64 %82, !dbg !17
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %95, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !18
  %98 = extractvalue { i32, i32 } %96, 1, !dbg !18
  %99 = trunc i32 %97 to i16, !dbg !18
  %extelt.offset15.1 = lshr i32 %97, 16, !dbg !18
  %100 = trunc nuw i32 %extelt.offset15.1 to i16, !dbg !18
  %101 = trunc i32 %98 to i16, !dbg !18
  %extelt.offset16.1 = lshr i32 %98, 16, !dbg !18
  %102 = trunc nuw i32 %extelt.offset16.1 to i16, !dbg !18
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #3, !dbg !19
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #3, !dbg !19
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #3, !dbg !19
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #3, !dbg !19
  %107 = zext nneg i32 %80 to i64, !dbg !20
  %108 = getelementptr i16, ptr addrspace(1) %2, i64 %107, !dbg !20
  %109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %108, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !21
  %110 = extractvalue { i32, i32 } %109, 0, !dbg !21
  %111 = extractvalue { i32, i32 } %109, 1, !dbg !21
  %112 = trunc i32 %110 to i16, !dbg !21
  %extelt.offset17.1 = lshr i32 %110, 16, !dbg !21
  %113 = trunc nuw i32 %extelt.offset17.1 to i16, !dbg !21
  %114 = trunc i32 %111 to i16, !dbg !21
  %extelt.offset18.1 = lshr i32 %111, 16, !dbg !21
  %115 = trunc nuw i32 %extelt.offset18.1 to i16, !dbg !21
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %112) #3, !dbg !22
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #3, !dbg !22
  %118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #3, !dbg !22
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %115) #3, !dbg !22
  %120 = getelementptr i16, ptr addrspace(1) %3, i64 %82, !dbg !23
  %121 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %120, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !24
  %122 = extractvalue { i32, i32 } %121, 0, !dbg !24
  %123 = extractvalue { i32, i32 } %121, 1, !dbg !24
  %124 = trunc i32 %122 to i16, !dbg !24
  %extelt.offset19.1 = lshr i32 %122, 16, !dbg !24
  %125 = trunc nuw i32 %extelt.offset19.1 to i16, !dbg !24
  %126 = trunc i32 %123 to i16, !dbg !24
  %extelt.offset20.1 = lshr i32 %123, 16, !dbg !24
  %127 = trunc nuw i32 %extelt.offset20.1 to i16, !dbg !24
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %124) #3, !dbg !25
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %125) #3, !dbg !25
  %130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %126) #3, !dbg !25
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %127) #3, !dbg !25
  %132 = getelementptr i16, ptr addrspace(1) %4, i64 %82, !dbg !26
  %133 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %132, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !27
  %134 = extractvalue { i32, i32 } %133, 0, !dbg !27
  %135 = extractvalue { i32, i32 } %133, 1, !dbg !27
  %136 = trunc i32 %134 to i16, !dbg !27
  %extelt.offset21.1 = lshr i32 %134, 16, !dbg !27
  %137 = trunc nuw i32 %extelt.offset21.1 to i16, !dbg !27
  %138 = trunc i32 %135 to i16, !dbg !27
  %extelt.offset22.1 = lshr i32 %135, 16, !dbg !27
  %139 = trunc nuw i32 %extelt.offset22.1 to i16, !dbg !27
  %140 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %136) #3, !dbg !28
  %141 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %137) #3, !dbg !28
  %142 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %138) #3, !dbg !28
  %143 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %139) #3, !dbg !28
  %144 = insertelement <2 x float> poison, float %27, i64 0, !dbg !30
  %145 = insertelement <2 x float> %144, float %28, i64 1, !dbg !30
  %146 = insertelement <2 x float> poison, float %39, i64 0, !dbg !30
  %147 = insertelement <2 x float> %146, float %40, i64 1, !dbg !30
  %148 = fadd <2 x float> %145, %147, !dbg !30
  %149 = insertelement <2 x float> poison, float %52, i64 0, !dbg !31
  %150 = insertelement <2 x float> %149, float %53, i64 1, !dbg !31
  %151 = fmul <2 x float> %148, %150, !dbg !31
  %152 = insertelement <2 x float> poison, float %64, i64 0, !dbg !32
  %153 = insertelement <2 x float> %152, float %65, i64 1, !dbg !32
  %154 = insertelement <2 x float> poison, float %76, i64 0, !dbg !32
  %155 = insertelement <2 x float> %154, float %77, i64 1, !dbg !32
  %156 = fadd <2 x float> %153, %155, !dbg !32
  %157 = fmul <2 x float> %151, %156, !dbg !33
  %158 = fadd <2 x float> %157, zeroinitializer, !dbg !34
  %159 = insertelement <2 x float> poison, float %91, i64 0, !dbg !30
  %160 = insertelement <2 x float> %159, float %92, i64 1, !dbg !30
  %161 = insertelement <2 x float> poison, float %103, i64 0, !dbg !30
  %162 = insertelement <2 x float> %161, float %104, i64 1, !dbg !30
  %163 = fadd <2 x float> %160, %162, !dbg !30
  %164 = insertelement <2 x float> poison, float %116, i64 0, !dbg !31
  %165 = insertelement <2 x float> %164, float %117, i64 1, !dbg !31
  %166 = fmul <2 x float> %163, %165, !dbg !31
  %167 = insertelement <2 x float> poison, float %128, i64 0, !dbg !32
  %168 = insertelement <2 x float> %167, float %129, i64 1, !dbg !32
  %169 = insertelement <2 x float> poison, float %140, i64 0, !dbg !32
  %170 = insertelement <2 x float> %169, float %141, i64 1, !dbg !32
  %171 = fadd <2 x float> %168, %170, !dbg !32
  %172 = fmul <2 x float> %166, %171, !dbg !33
  %173 = fadd <2 x float> %158, %172, !dbg !34
  %174 = insertelement <2 x float> poison, float %30, i64 0, !dbg !30
  %175 = insertelement <2 x float> %174, float %29, i64 1, !dbg !30
  %176 = insertelement <2 x float> poison, float %42, i64 0, !dbg !30
  %177 = insertelement <2 x float> %176, float %41, i64 1, !dbg !30
  %178 = fadd <2 x float> %175, %177, !dbg !30
  %179 = insertelement <2 x float> poison, float %55, i64 0, !dbg !31
  %180 = insertelement <2 x float> %179, float %54, i64 1, !dbg !31
  %181 = fmul <2 x float> %178, %180, !dbg !31
  %182 = insertelement <2 x float> poison, float %67, i64 0, !dbg !32
  %183 = insertelement <2 x float> %182, float %66, i64 1, !dbg !32
  %184 = insertelement <2 x float> poison, float %79, i64 0, !dbg !32
  %185 = insertelement <2 x float> %184, float %78, i64 1, !dbg !32
  %186 = fadd <2 x float> %183, %185, !dbg !32
  %187 = fmul <2 x float> %181, %186, !dbg !33
  %188 = fadd <2 x float> %187, zeroinitializer, !dbg !34
  %189 = insertelement <2 x float> poison, float %94, i64 0, !dbg !30
  %190 = insertelement <2 x float> %189, float %93, i64 1, !dbg !30
  %191 = insertelement <2 x float> poison, float %106, i64 0, !dbg !30
  %192 = insertelement <2 x float> %191, float %105, i64 1, !dbg !30
  %193 = fadd <2 x float> %190, %192, !dbg !30
  %194 = insertelement <2 x float> poison, float %119, i64 0, !dbg !31
  %195 = insertelement <2 x float> %194, float %118, i64 1, !dbg !31
  %196 = fmul <2 x float> %193, %195, !dbg !31
  %197 = insertelement <2 x float> poison, float %131, i64 0, !dbg !32
  %198 = insertelement <2 x float> %197, float %130, i64 1, !dbg !32
  %199 = insertelement <2 x float> poison, float %143, i64 0, !dbg !32
  %200 = insertelement <2 x float> %199, float %142, i64 1, !dbg !32
  %201 = fadd <2 x float> %198, %200, !dbg !32
  %202 = fmul <2 x float> %196, %201, !dbg !33
  %203 = fadd <2 x float> %188, %202, !dbg !34
  %204 = lshr i32 %12, 5, !dbg !11
  %shift = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %205 = fadd <2 x float> %173, %shift, !dbg !35
  %shift26 = shufflevector <2 x float> %203, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %206 = fadd <2 x float> %shift26, %205, !dbg !35
  %207 = fadd <2 x float> %203, %206, !dbg !35
  %208 = extractelement <2 x float> %207, i64 0, !dbg !35
  %209 = bitcast float %208 to i32, !dbg !40
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 16, i32 31), !dbg !40
  %211 = bitcast i32 %210 to float, !dbg !40
  %212 = fadd float %208, %211, !dbg !35
  %213 = bitcast float %212 to i32, !dbg !40
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 8, i32 31), !dbg !40
  %215 = bitcast i32 %214 to float, !dbg !40
  %216 = fadd float %212, %215, !dbg !35
  %217 = bitcast float %216 to i32, !dbg !40
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 4, i32 31), !dbg !40
  %219 = bitcast i32 %218 to float, !dbg !40
  %220 = fadd float %216, %219, !dbg !35
  %221 = bitcast float %220 to i32, !dbg !40
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 2, i32 31), !dbg !40
  %223 = bitcast i32 %222 to float, !dbg !40
  %224 = fadd float %220, %223, !dbg !35
  %225 = bitcast float %224 to i32, !dbg !40
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 1, i32 31), !dbg !40
  %227 = bitcast i32 %226 to float, !dbg !40
  %228 = fadd float %224, %227, !dbg !35
  %229 = icmp eq i32 %13, 0, !dbg !40
  %230 = and i32 %204, 7, !dbg !40
  %231 = zext nneg i32 %230 to i64, !dbg !40
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i64 %231, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, float %228, i1 %229) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %233 = icmp slt i32 %12, 8, !dbg !40
  %234 = sext i32 %12 to i64, !dbg !40
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i64 %234, !dbg !40
  %236 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %235, i1 %233) #3, !dbg !40
  %237 = bitcast float %236 to i32, !dbg !40
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 4, i32 31), !dbg !40
  %239 = bitcast i32 %238 to float, !dbg !40
  %240 = fadd float %236, %239, !dbg !35
  %241 = bitcast float %240 to i32, !dbg !40
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 2, i32 31), !dbg !40
  %243 = bitcast i32 %242 to float, !dbg !40
  %244 = fadd float %240, %243, !dbg !35
  %245 = bitcast float %244 to i32, !dbg !40
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 1, i32 31), !dbg !40
  %247 = bitcast i32 %246 to float, !dbg !40
  %248 = fadd float %244, %247, !dbg !35
  %249 = and i32 %12, 7, !dbg !40
  %250 = icmp eq i32 %249, 0, !dbg !40
  %251 = and i1 %233, %250, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, float %248, i1 %251) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %252 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %253 = sext i32 %11 to i64, !dbg !41
  %254 = getelementptr float, ptr addrspace(1) %6, i64 %253, !dbg !41
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #3, !dbg !42
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #3, !dbg !42
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #3, !dbg !42
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #3, !dbg !42
  %259 = bitcast i32 %258 to float, !dbg !42
  %260 = fmul float %252, -5.000000e-01, !dbg !43
  %261 = fmul float %259, %259, !dbg !44
  %262 = fmul float %261, %259, !dbg !45
  %263 = fmul float %260, %262, !dbg !46
  %264 = fmul float %263, 0x3F40000000000000, !dbg !47
  %265 = insertelement <2 x float> poison, float %259, i64 0, !dbg !48
  %266 = insertelement <2 x float> %265, float %264, i64 1, !dbg !48
  br label %267, !dbg !49

267:                                              ; preds = %10, %267
  %268 = phi i1 [ true, %10 ], [ false, %267 ]
  %269 = phi i32 [ 0, %10 ], [ 1024, %267 ]
  %270 = or disjoint i32 %269, %15, !dbg !50
  %271 = or disjoint i32 %270, %16, !dbg !51
  %272 = sext i32 %271 to i64, !dbg !52
  %273 = getelementptr i16, ptr addrspace(1) %5, i64 %272, !dbg !52
  %274 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %273, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !53
  %275 = extractvalue { i32, i32 } %274, 0, !dbg !53
  %276 = extractvalue { i32, i32 } %274, 1, !dbg !53
  %277 = trunc i32 %275 to i16, !dbg !53
  %extelt.offset = lshr i32 %275, 16, !dbg !53
  %278 = trunc nuw i32 %extelt.offset to i16, !dbg !53
  %279 = trunc i32 %276 to i16, !dbg !53
  %extelt.offset2 = lshr i32 %276, 16, !dbg !53
  %280 = trunc nuw i32 %extelt.offset2 to i16, !dbg !53
  %281 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %277) #3, !dbg !54
  %282 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %278) #3, !dbg !54
  %283 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %279) #3, !dbg !54
  %284 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %280) #3, !dbg !54
  %285 = getelementptr i16, ptr addrspace(1) %0, i64 %272, !dbg !55
  %286 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %285, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !56
  %287 = extractvalue { i32, i32 } %286, 0, !dbg !56
  %288 = extractvalue { i32, i32 } %286, 1, !dbg !56
  %289 = trunc i32 %287 to i16, !dbg !56
  %extelt.offset3 = lshr i32 %287, 16, !dbg !56
  %290 = trunc nuw i32 %extelt.offset3 to i16, !dbg !56
  %291 = trunc i32 %288 to i16, !dbg !56
  %extelt.offset4 = lshr i32 %288, 16, !dbg !56
  %292 = trunc nuw i32 %extelt.offset4 to i16, !dbg !56
  %293 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %289) #3, !dbg !57
  %294 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %290) #3, !dbg !57
  %295 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %291) #3, !dbg !57
  %296 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %292) #3, !dbg !57
  %297 = getelementptr i16, ptr addrspace(1) %1, i64 %272, !dbg !58
  %298 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %297, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !59
  %299 = extractvalue { i32, i32 } %298, 0, !dbg !59
  %300 = extractvalue { i32, i32 } %298, 1, !dbg !59
  %301 = trunc i32 %299 to i16, !dbg !59
  %extelt.offset5 = lshr i32 %299, 16, !dbg !59
  %302 = trunc nuw i32 %extelt.offset5 to i16, !dbg !59
  %303 = trunc i32 %300 to i16, !dbg !59
  %extelt.offset6 = lshr i32 %300, 16, !dbg !59
  %304 = trunc nuw i32 %extelt.offset6 to i16, !dbg !59
  %305 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %301) #3, !dbg !60
  %306 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %302) #3, !dbg !60
  %307 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %303) #3, !dbg !60
  %308 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %304) #3, !dbg !60
  %309 = zext nneg i32 %270 to i64, !dbg !61
  %310 = getelementptr i16, ptr addrspace(1) %2, i64 %309, !dbg !61
  %311 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %310, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !62
  %312 = extractvalue { i32, i32 } %311, 0, !dbg !62
  %313 = extractvalue { i32, i32 } %311, 1, !dbg !62
  %314 = trunc i32 %312 to i16, !dbg !62
  %extelt.offset7 = lshr i32 %312, 16, !dbg !62
  %315 = trunc nuw i32 %extelt.offset7 to i16, !dbg !62
  %316 = trunc i32 %313 to i16, !dbg !62
  %extelt.offset8 = lshr i32 %313, 16, !dbg !62
  %317 = trunc nuw i32 %extelt.offset8 to i16, !dbg !62
  %318 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %314) #3, !dbg !63
  %319 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %315) #3, !dbg !63
  %320 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %316) #3, !dbg !63
  %321 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %317) #3, !dbg !63
  %322 = getelementptr i16, ptr addrspace(1) %3, i64 %272, !dbg !64
  %323 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %322, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !65
  %324 = extractvalue { i32, i32 } %323, 0, !dbg !65
  %325 = extractvalue { i32, i32 } %323, 1, !dbg !65
  %326 = trunc i32 %324 to i16, !dbg !65
  %extelt.offset9 = lshr i32 %324, 16, !dbg !65
  %327 = trunc nuw i32 %extelt.offset9 to i16, !dbg !65
  %328 = trunc i32 %325 to i16, !dbg !65
  %extelt.offset10 = lshr i32 %325, 16, !dbg !65
  %329 = trunc nuw i32 %extelt.offset10 to i16, !dbg !65
  %330 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %326) #3, !dbg !66
  %331 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %327) #3, !dbg !66
  %332 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %328) #3, !dbg !66
  %333 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %329) #3, !dbg !66
  %334 = getelementptr i16, ptr addrspace(1) %4, i64 %272, !dbg !67
  %335 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %334, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !68
  %336 = extractvalue { i32, i32 } %335, 0, !dbg !68
  %337 = extractvalue { i32, i32 } %335, 1, !dbg !68
  %338 = trunc i32 %336 to i16, !dbg !68
  %extelt.offset11 = lshr i32 %336, 16, !dbg !68
  %339 = trunc nuw i32 %extelt.offset11 to i16, !dbg !68
  %340 = trunc i32 %337 to i16, !dbg !68
  %extelt.offset12 = lshr i32 %337, 16, !dbg !68
  %341 = trunc nuw i32 %extelt.offset12 to i16, !dbg !68
  %342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %338) #3, !dbg !69
  %343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %339) #3, !dbg !69
  %344 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %340) #3, !dbg !69
  %345 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %341) #3, !dbg !69
  %346 = insertelement <2 x float> poison, float %293, i64 0, !dbg !70
  %347 = insertelement <2 x float> %346, float %330, i64 1, !dbg !70
  %348 = insertelement <2 x float> poison, float %305, i64 0, !dbg !70
  %349 = insertelement <2 x float> %348, float %342, i64 1, !dbg !70
  %350 = fadd <2 x float> %347, %349, !dbg !70
  %351 = insertelement <2 x float> <float poison, float 2.000000e+00>, float %318, i64 0, !dbg !71
  %352 = fmul <2 x float> %350, %351, !dbg !71
  %353 = fmul <2 x float> %352, %266, !dbg !48
  %354 = insertelement <2 x float> poison, float %294, i64 0, !dbg !70
  %355 = insertelement <2 x float> %354, float %331, i64 1, !dbg !70
  %356 = insertelement <2 x float> poison, float %306, i64 0, !dbg !70
  %357 = insertelement <2 x float> %356, float %343, i64 1, !dbg !70
  %358 = fadd <2 x float> %355, %357, !dbg !70
  %359 = insertelement <2 x float> <float poison, float 2.000000e+00>, float %319, i64 0, !dbg !71
  %360 = fmul <2 x float> %358, %359, !dbg !71
  %361 = fmul <2 x float> %360, %266, !dbg !48
  %362 = insertelement <2 x float> poison, float %295, i64 0, !dbg !70
  %363 = insertelement <2 x float> %362, float %332, i64 1, !dbg !70
  %364 = insertelement <2 x float> poison, float %307, i64 0, !dbg !70
  %365 = insertelement <2 x float> %364, float %344, i64 1, !dbg !70
  %366 = fadd <2 x float> %363, %365, !dbg !70
  %367 = insertelement <2 x float> <float poison, float 2.000000e+00>, float %320, i64 0, !dbg !71
  %368 = fmul <2 x float> %366, %367, !dbg !71
  %369 = fmul <2 x float> %368, %266, !dbg !48
  %370 = insertelement <2 x float> poison, float %296, i64 0, !dbg !70
  %371 = insertelement <2 x float> %370, float %333, i64 1, !dbg !70
  %372 = insertelement <2 x float> poison, float %308, i64 0, !dbg !70
  %373 = insertelement <2 x float> %372, float %345, i64 1, !dbg !70
  %374 = fadd <2 x float> %371, %373, !dbg !70
  %375 = insertelement <2 x float> <float poison, float 2.000000e+00>, float %321, i64 0, !dbg !71
  %376 = fmul <2 x float> %374, %375, !dbg !71
  %377 = fmul <2 x float> %376, %266, !dbg !48
  %shift27 = shufflevector <2 x float> %353, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !72
  %378 = fadd <2 x float> %353, %shift27, !dbg !72
  %379 = extractelement <2 x float> %378, i64 0, !dbg !72
  %shift28 = shufflevector <2 x float> %361, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !72
  %380 = fadd <2 x float> %361, %shift28, !dbg !72
  %381 = extractelement <2 x float> %380, i64 0, !dbg !72
  %shift29 = shufflevector <2 x float> %369, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !72
  %382 = fadd <2 x float> %369, %shift29, !dbg !72
  %383 = extractelement <2 x float> %382, i64 0, !dbg !72
  %shift30 = shufflevector <2 x float> %377, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !72
  %384 = fadd <2 x float> %377, %shift30, !dbg !72
  %385 = extractelement <2 x float> %384, i64 0, !dbg !72
  %386 = fadd float %281, %379, !dbg !73
  %387 = fadd float %282, %381, !dbg !73
  %388 = fadd float %283, %383, !dbg !73
  %389 = fadd float %284, %385, !dbg !73
  %390 = getelementptr i16, ptr addrspace(1) %7, i64 %272, !dbg !74
  %391 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %386) #3, !dbg !75
  %392 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %387) #3, !dbg !75
  %393 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %388) #3, !dbg !75
  %394 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %389) #3, !dbg !75
  %395 = insertelement <2 x i16> poison, i16 %391, i64 0, !dbg !75
  %396 = insertelement <2 x i16> %395, i16 %392, i64 1, !dbg !75
  %397 = bitcast <2 x i16> %396 to i32, !dbg !75
  %398 = insertelement <2 x i16> poison, i16 %393, i64 0, !dbg !75
  %399 = insertelement <2 x i16> %398, i16 %394, i64 1, !dbg !75
  %400 = bitcast <2 x i16> %399 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %397, i32 %400, ptr addrspace(1) %390, i1 true) #3, !dbg !75
  br i1 %268, label %267, label %401, !dbg !49

401:                                              ; preds = %267
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4opo4kxhzuksj54zkghm27wzivg3xbqtaezvbtxrlhxcp3erakm.py", directory: "/auto/home/menuab/code/YNNtitan/torchinductor_menuab/4o")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 51, scope: !7)
!19 = !DILocation(line: 32, column: 102, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 39, scope: !7)
!22 = !DILocation(line: 33, column: 90, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 51, scope: !7)
!25 = !DILocation(line: 34, column: 102, scope: !7)
!26 = !DILocation(line: 35, column: 34, scope: !7)
!27 = !DILocation(line: 35, column: 51, scope: !7)
!28 = !DILocation(line: 35, column: 102, scope: !7)
!29 = !DILocation(line: 28, column: 27, scope: !7)
!30 = !DILocation(line: 36, column: 22, scope: !7)
!31 = !DILocation(line: 37, column: 22, scope: !7)
!32 = !DILocation(line: 39, column: 22, scope: !7)
!33 = !DILocation(line: 41, column: 23, scope: !7)
!34 = !DILocation(line: 43, column: 25, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/auto/home/menuab/miniforge3/envs/titan/lib/python3.10/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!39 = !DILocation(line: 45, column: 27, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 46, column: 31, scope: !7)
!42 = !DILocation(line: 46, column: 36, scope: !7)
!43 = !DILocation(line: 62, column: 24, scope: !7)
!44 = !DILocation(line: 63, column: 24, scope: !7)
!45 = !DILocation(line: 64, column: 24, scope: !7)
!46 = !DILocation(line: 65, column: 24, scope: !7)
!47 = !DILocation(line: 67, column: 24, scope: !7)
!48 = !DILocation(line: 60, column: 24, scope: !7)
!49 = !DILocation(line: 47, column: 36, scope: !7)
!50 = !DILocation(line: 48, column: 27, scope: !7)
!51 = !DILocation(line: 51, column: 41, scope: !7)
!52 = !DILocation(line: 51, column: 35, scope: !7)
!53 = !DILocation(line: 51, column: 52, scope: !7)
!54 = !DILocation(line: 51, column: 104, scope: !7)
!55 = !DILocation(line: 52, column: 35, scope: !7)
!56 = !DILocation(line: 52, column: 52, scope: !7)
!57 = !DILocation(line: 52, column: 104, scope: !7)
!58 = !DILocation(line: 53, column: 35, scope: !7)
!59 = !DILocation(line: 53, column: 52, scope: !7)
!60 = !DILocation(line: 53, column: 104, scope: !7)
!61 = !DILocation(line: 54, column: 35, scope: !7)
!62 = !DILocation(line: 54, column: 40, scope: !7)
!63 = !DILocation(line: 54, column: 91, scope: !7)
!64 = !DILocation(line: 55, column: 35, scope: !7)
!65 = !DILocation(line: 55, column: 52, scope: !7)
!66 = !DILocation(line: 55, column: 104, scope: !7)
!67 = !DILocation(line: 56, column: 35, scope: !7)
!68 = !DILocation(line: 56, column: 52, scope: !7)
!69 = !DILocation(line: 56, column: 104, scope: !7)
!70 = !DILocation(line: 57, column: 24, scope: !7)
!71 = !DILocation(line: 58, column: 24, scope: !7)
!72 = !DILocation(line: 73, column: 24, scope: !7)
!73 = !DILocation(line: 75, column: 24, scope: !7)
!74 = !DILocation(line: 76, column: 29, scope: !7)
!75 = !DILocation(line: 76, column: 53, scope: !7)
!76 = !DILocation(line: 47, column: 4, scope: !7)
