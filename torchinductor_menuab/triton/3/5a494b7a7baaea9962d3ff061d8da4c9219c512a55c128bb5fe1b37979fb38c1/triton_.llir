; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = and i32 %8, 31, !dbg !11
  %10 = lshr i32 %8, 5, !dbg !11
  %11 = shl i32 %8, 2, !dbg !11
  %12 = and i32 %11, 2044, !dbg !11
  %13 = shl i32 %7, 11, !dbg !12
  %14 = or disjoint i32 %13, %12, !dbg !13
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr i16, ptr addrspace(1) %1, i64 %15, !dbg !14
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %16, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !15
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !15
  %19 = extractvalue { i32, i32 } %17, 1, !dbg !15
  %20 = trunc i32 %18 to i16, !dbg !15
  %extelt.offset = lshr i32 %18, 16, !dbg !15
  %21 = trunc nuw i32 %extelt.offset to i16, !dbg !15
  %22 = trunc i32 %19 to i16, !dbg !15
  %extelt.offset1 = lshr i32 %19, 16, !dbg !15
  %23 = trunc nuw i32 %extelt.offset1 to i16, !dbg !15
  %24 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #5, !dbg !16
  %25 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #5, !dbg !16
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #5, !dbg !16
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #5, !dbg !16
  %28 = fmul float %24, %24, !dbg !17
  %29 = fmul float %25, %25, !dbg !17
  %30 = fmul float %26, %26, !dbg !17
  %31 = fmul float %27, %27, !dbg !17
  %32 = fadd float %28, %29, !dbg !18
  %33 = fadd float %32, %30, !dbg !18
  %34 = fadd float %33, %31, !dbg !18
  %35 = bitcast float %34 to i32, !dbg !23
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 16, i32 31), !dbg !23
  %37 = bitcast i32 %36 to float, !dbg !23
  %38 = fadd float %34, %37, !dbg !18
  %39 = bitcast float %38 to i32, !dbg !23
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 8, i32 31), !dbg !23
  %41 = bitcast i32 %40 to float, !dbg !23
  %42 = fadd float %38, %41, !dbg !18
  %43 = bitcast float %42 to i32, !dbg !23
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 4, i32 31), !dbg !23
  %45 = bitcast i32 %44 to float, !dbg !23
  %46 = fadd float %42, %45, !dbg !18
  %47 = bitcast float %46 to i32, !dbg !23
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 2, i32 31), !dbg !23
  %49 = bitcast i32 %48 to float, !dbg !23
  %50 = fadd float %46, %49, !dbg !18
  %51 = bitcast float %50 to i32, !dbg !23
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 1, i32 31), !dbg !23
  %53 = bitcast i32 %52 to float, !dbg !23
  %54 = fadd float %50, %53, !dbg !18
  %55 = icmp eq i32 %9, 0, !dbg !23
  %56 = and i32 %10, 15, !dbg !23
  %57 = zext nneg i32 %56 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i64 %57, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, float %54, i1 %55) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %59 = icmp slt i32 %8, 16, !dbg !23
  %60 = sext i32 %8 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60, !dbg !23
  %62 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %61, i1 %59) #5, !dbg !23
  %63 = bitcast float %62 to i32, !dbg !23
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 8, i32 31), !dbg !23
  %65 = bitcast i32 %64 to float, !dbg !23
  %66 = fadd float %62, %65, !dbg !18
  %67 = bitcast float %66 to i32, !dbg !23
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 4, i32 31), !dbg !23
  %69 = bitcast i32 %68 to float, !dbg !23
  %70 = fadd float %66, %69, !dbg !18
  %71 = bitcast float %70 to i32, !dbg !23
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 2, i32 31), !dbg !23
  %73 = bitcast i32 %72 to float, !dbg !23
  %74 = fadd float %70, %73, !dbg !18
  %75 = bitcast float %74 to i32, !dbg !23
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !23
  %77 = bitcast i32 %76 to float, !dbg !23
  %78 = fadd float %74, %77, !dbg !18
  %79 = and i32 %8, 15, !dbg !23
  %80 = icmp eq i32 %79, 0, !dbg !23
  %81 = and i1 %59, %80, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, float %78, i1 %81) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %82 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 2.048000e+03) #5, !dbg !25
  %84 = fadd float %83, 0x3EE4F8B580000000, !dbg !26
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !24
  %.not.i = icmp eq i32 %85, 0, !dbg !24
  br i1 %.not.i, label %88, label %86, !dbg !24

86:                                               ; preds = %6
  %87 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %84), !dbg !24
  br label %__nv_rsqrtf.exit, !dbg !24

88:                                               ; preds = %6
  %89 = tail call float @llvm.nvvm.rsqrt.approx.f(float %84), !dbg !24
  br label %__nv_rsqrtf.exit, !dbg !24

__nv_rsqrtf.exit:                                 ; preds = %86, %88
  %.0.i = phi float [ %87, %86 ], [ %89, %88 ], !dbg !24
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !24
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !24
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !24
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !24
  %.not.i15 = icmp eq i32 %93, 0, !dbg !24
  br i1 %.not.i15, label %96, label %94, !dbg !24

94:                                               ; preds = %__nv_rsqrtf.exit
  %95 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %84), !dbg !24
  br label %__nv_rsqrtf.exit17, !dbg !24

96:                                               ; preds = %__nv_rsqrtf.exit
  %97 = tail call float @llvm.nvvm.rsqrt.approx.f(float %84), !dbg !24
  br label %__nv_rsqrtf.exit17, !dbg !24

__nv_rsqrtf.exit17:                               ; preds = %94, %96
  %.0.i16 = phi float [ %95, %94 ], [ %97, %96 ], !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %98 = sext i32 %7 to i64, !dbg !28
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !28
  %urem = and i32 %8, 511, !dbg !29
  %100 = icmp eq i32 %urem, 0, !dbg !29
  %101 = bitcast float %.0.i to i32, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %99, i1 %100) #5, !dbg !29
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %16, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !30
  %103 = extractvalue { i32, i32 } %102, 0, !dbg !30
  %104 = extractvalue { i32, i32 } %102, 1, !dbg !30
  %105 = trunc i32 %103 to i16, !dbg !30
  %extelt.offset2 = lshr i32 %103, 16, !dbg !30
  %106 = trunc nuw i32 %extelt.offset2 to i16, !dbg !30
  %107 = trunc i32 %104 to i16, !dbg !30
  %extelt.offset3 = lshr i32 %104, 16, !dbg !30
  %108 = trunc nuw i32 %extelt.offset3 to i16, !dbg !30
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %105) #5, !dbg !31
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #5, !dbg !31
  %111 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #5, !dbg !31
  %112 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #5, !dbg !31
  %113 = zext nneg i32 %12 to i64, !dbg !32
  %114 = getelementptr i16, ptr addrspace(1) %2, i64 %113, !dbg !32
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %114, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !33
  %116 = extractvalue { i32, i32 } %115, 0, !dbg !33
  %117 = extractvalue { i32, i32 } %115, 1, !dbg !33
  %118 = trunc i32 %116 to i16, !dbg !33
  %extelt.offset4 = lshr i32 %116, 16, !dbg !33
  %119 = trunc nuw i32 %extelt.offset4 to i16, !dbg !33
  %120 = trunc i32 %117 to i16, !dbg !33
  %extelt.offset5 = lshr i32 %117, 16, !dbg !33
  %121 = trunc nuw i32 %extelt.offset5 to i16, !dbg !33
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #5, !dbg !34
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #5, !dbg !34
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #5, !dbg !34
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %121) #5, !dbg !34
  %126 = fmul float %.0.i16, %109, !dbg !35
  %127 = fmul float %.0.i16, %110, !dbg !35
  %128 = fmul float %.0.i16, %111, !dbg !35
  %129 = fmul float %.0.i16, %112, !dbg !35
  %130 = fmul float %126, %122, !dbg !36
  %131 = fmul float %127, %123, !dbg !36
  %132 = fmul float %128, %124, !dbg !36
  %133 = fmul float %129, %125, !dbg !36
  %134 = getelementptr i16, ptr addrspace(1) %3, i64 %15, !dbg !37
  %135 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %130) #5, !dbg !38
  %136 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %131) #5, !dbg !38
  %137 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %132) #5, !dbg !38
  %138 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %133) #5, !dbg !38
  %139 = insertelement <2 x i16> poison, i16 %135, i64 0, !dbg !38
  %140 = insertelement <2 x i16> %139, i16 %136, i64 1, !dbg !38
  %141 = bitcast <2 x i16> %140 to i32, !dbg !38
  %142 = insertelement <2 x i16> poison, i16 %137, i64 0, !dbg !38
  %143 = insertelement <2 x i16> %142, i16 %138, i64 1, !dbg !38
  %144 = bitcast <2 x i16> %143 to i32, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %141, i32 %144, ptr addrspace(1) %134, i1 true) #5, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqabezvx25jgnevst5ihj7o2sasbhzs4cgof3o7ry2tur7lqz7dw.py", directory: "/auto/home/menuab/code/YNNtitan/torchinductor_menuab/qa")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 33, column: 22, scope: !7)
!18 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !22)
!19 = distinct !DILexicalBlockFile(scope: !21, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/auto/home/menuab/miniforge3/envs/titan/lib/python3.10/site-packages/triton/language")
!21 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!22 = !DILocation(line: 37, column: 25, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !22)
!24 = !DILocation(line: 42, column: 28, scope: !7)
!25 = !DILocation(line: 39, column: 18, scope: !7)
!26 = !DILocation(line: 41, column: 18, scope: !7)
!27 = !DILocation(line: 43, column: 4, scope: !7)
!28 = !DILocation(line: 44, column: 28, scope: !7)
!29 = !DILocation(line: 44, column: 40, scope: !7)
!30 = !DILocation(line: 49, column: 52, scope: !7)
!31 = !DILocation(line: 49, column: 104, scope: !7)
!32 = !DILocation(line: 50, column: 35, scope: !7)
!33 = !DILocation(line: 50, column: 40, scope: !7)
!34 = !DILocation(line: 50, column: 91, scope: !7)
!35 = !DILocation(line: 52, column: 24, scope: !7)
!36 = !DILocation(line: 54, column: 24, scope: !7)
!37 = !DILocation(line: 55, column: 29, scope: !7)
!38 = !DILocation(line: 55, column: 53, scope: !7)
!39 = !DILocation(line: 45, column: 4, scope: !7)
