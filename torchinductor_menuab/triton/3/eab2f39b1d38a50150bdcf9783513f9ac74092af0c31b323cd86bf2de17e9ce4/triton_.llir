; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 3, !dbg !12
  %11 = and i32 %10, 1016, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = sext i32 %12 to i64, !dbg !14
  %14 = getelementptr i16, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #1, !dbg !15
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !15
  %20 = trunc i32 %16 to i16, !dbg !15
  %extelt.offset = lshr i32 %16, 16, !dbg !15
  %21 = trunc nuw i32 %extelt.offset to i16, !dbg !15
  %22 = trunc i32 %17 to i16, !dbg !15
  %extelt.offset1 = lshr i32 %17, 16, !dbg !15
  %23 = trunc nuw i32 %extelt.offset1 to i16, !dbg !15
  %24 = trunc i32 %18 to i16, !dbg !15
  %extelt.offset2 = lshr i32 %18, 16, !dbg !15
  %25 = trunc nuw i32 %extelt.offset2 to i16, !dbg !15
  %26 = trunc i32 %19 to i16, !dbg !15
  %extelt.offset3 = lshr i32 %19, 16, !dbg !15
  %27 = trunc nuw i32 %extelt.offset3 to i16, !dbg !15
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #1, !dbg !16
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #1, !dbg !16
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #1, !dbg !16
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #1, !dbg !16
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #1, !dbg !16
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #1, !dbg !16
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #1, !dbg !16
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #1, !dbg !16
  %36 = getelementptr i16, ptr addrspace(1) %1, i64 %13, !dbg !17
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !18
  %42 = trunc i32 %38 to i16, !dbg !18
  %extelt.offset4 = lshr i32 %38, 16, !dbg !18
  %43 = trunc nuw i32 %extelt.offset4 to i16, !dbg !18
  %44 = trunc i32 %39 to i16, !dbg !18
  %extelt.offset5 = lshr i32 %39, 16, !dbg !18
  %45 = trunc nuw i32 %extelt.offset5 to i16, !dbg !18
  %46 = trunc i32 %40 to i16, !dbg !18
  %extelt.offset6 = lshr i32 %40, 16, !dbg !18
  %47 = trunc nuw i32 %extelt.offset6 to i16, !dbg !18
  %48 = trunc i32 %41 to i16, !dbg !18
  %extelt.offset7 = lshr i32 %41, 16, !dbg !18
  %49 = trunc nuw i32 %extelt.offset7 to i16, !dbg !18
  %50 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #1, !dbg !19
  %51 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #1, !dbg !19
  %52 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #1, !dbg !19
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #1, !dbg !19
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #1, !dbg !19
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #1, !dbg !19
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %48) #1, !dbg !19
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #1, !dbg !19
  %58 = getelementptr i16, ptr addrspace(1) %2, i64 %13, !dbg !20
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !21
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !21
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !21
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !21
  %64 = trunc i32 %60 to i16, !dbg !21
  %extelt.offset8 = lshr i32 %60, 16, !dbg !21
  %65 = trunc nuw i32 %extelt.offset8 to i16, !dbg !21
  %66 = trunc i32 %61 to i16, !dbg !21
  %extelt.offset9 = lshr i32 %61, 16, !dbg !21
  %67 = trunc nuw i32 %extelt.offset9 to i16, !dbg !21
  %68 = trunc i32 %62 to i16, !dbg !21
  %extelt.offset10 = lshr i32 %62, 16, !dbg !21
  %69 = trunc nuw i32 %extelt.offset10 to i16, !dbg !21
  %70 = trunc i32 %63 to i16, !dbg !21
  %extelt.offset11 = lshr i32 %63, 16, !dbg !21
  %71 = trunc nuw i32 %extelt.offset11 to i16, !dbg !21
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #1, !dbg !22
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #1, !dbg !22
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #1, !dbg !22
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #1, !dbg !22
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #1, !dbg !22
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #1, !dbg !22
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #1, !dbg !22
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #1, !dbg !22
  %80 = fsub float 0.000000e+00, %50, !dbg !23
  %81 = fsub float 0.000000e+00, %51, !dbg !23
  %82 = fsub float 0.000000e+00, %52, !dbg !23
  %83 = fsub float 0.000000e+00, %53, !dbg !23
  %84 = fsub float 0.000000e+00, %54, !dbg !23
  %85 = fsub float 0.000000e+00, %55, !dbg !23
  %86 = fsub float 0.000000e+00, %56, !dbg !23
  %87 = fsub float 0.000000e+00, %57, !dbg !23
  %88 = fmul float %80, 0x3FF7154760000000, !dbg !27
  %89 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %88) #1, !dbg !27
  %90 = fmul float %81, 0x3FF7154760000000, !dbg !27
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #1, !dbg !27
  %92 = fmul float %82, 0x3FF7154760000000, !dbg !27
  %93 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %92) #1, !dbg !27
  %94 = fmul float %83, 0x3FF7154760000000, !dbg !27
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %94) #1, !dbg !27
  %96 = fmul float %84, 0x3FF7154760000000, !dbg !27
  %97 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %96) #1, !dbg !27
  %98 = fmul float %85, 0x3FF7154760000000, !dbg !27
  %99 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %98) #1, !dbg !27
  %100 = fmul float %86, 0x3FF7154760000000, !dbg !27
  %101 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %100) #1, !dbg !27
  %102 = fmul float %87, 0x3FF7154760000000, !dbg !27
  %103 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %102) #1, !dbg !27
  %104 = fadd float %89, 1.000000e+00, !dbg !28
  %105 = fadd float %91, 1.000000e+00, !dbg !28
  %106 = fadd float %93, 1.000000e+00, !dbg !28
  %107 = fadd float %95, 1.000000e+00, !dbg !28
  %108 = fadd float %97, 1.000000e+00, !dbg !28
  %109 = fadd float %99, 1.000000e+00, !dbg !28
  %110 = fadd float %101, 1.000000e+00, !dbg !28
  %111 = fadd float %103, 1.000000e+00, !dbg !28
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %104) #1, !dbg !29
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %105) #1, !dbg !29
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %106) #1, !dbg !29
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %107) #1, !dbg !29
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %108) #1, !dbg !29
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %109) #1, !dbg !29
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %110) #1, !dbg !29
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %111) #1, !dbg !29
  %120 = fmul float %50, %112, !dbg !30
  %121 = fmul float %51, %113, !dbg !30
  %122 = fmul float %52, %114, !dbg !30
  %123 = fmul float %53, %115, !dbg !30
  %124 = fmul float %54, %116, !dbg !30
  %125 = fmul float %55, %117, !dbg !30
  %126 = fmul float %56, %118, !dbg !30
  %127 = fmul float %57, %119, !dbg !30
  %128 = fmul float %28, %120, !dbg !31
  %129 = fmul float %29, %121, !dbg !31
  %130 = fmul float %30, %122, !dbg !31
  %131 = fmul float %31, %123, !dbg !31
  %132 = fmul float %32, %124, !dbg !31
  %133 = fmul float %33, %125, !dbg !31
  %134 = fmul float %34, %126, !dbg !31
  %135 = fmul float %35, %127, !dbg !31
  %136 = fmul float %28, %72, !dbg !32
  %137 = fmul float %29, %73, !dbg !32
  %138 = fmul float %30, %74, !dbg !32
  %139 = fmul float %31, %75, !dbg !32
  %140 = fmul float %32, %76, !dbg !32
  %141 = fmul float %33, %77, !dbg !32
  %142 = fmul float %34, %78, !dbg !32
  %143 = fmul float %35, %79, !dbg !32
  %144 = fsub float 1.000000e+00, %112, !dbg !33
  %145 = fsub float 1.000000e+00, %113, !dbg !33
  %146 = fsub float 1.000000e+00, %114, !dbg !33
  %147 = fsub float 1.000000e+00, %115, !dbg !33
  %148 = fsub float 1.000000e+00, %116, !dbg !33
  %149 = fsub float 1.000000e+00, %117, !dbg !33
  %150 = fsub float 1.000000e+00, %118, !dbg !33
  %151 = fsub float 1.000000e+00, %119, !dbg !33
  %152 = fmul float %50, %144, !dbg !34
  %153 = fmul float %51, %145, !dbg !34
  %154 = fmul float %52, %146, !dbg !34
  %155 = fmul float %53, %147, !dbg !34
  %156 = fmul float %54, %148, !dbg !34
  %157 = fmul float %55, %149, !dbg !34
  %158 = fmul float %56, %150, !dbg !34
  %159 = fmul float %57, %151, !dbg !34
  %160 = fadd float %152, 1.000000e+00, !dbg !35
  %161 = fadd float %153, 1.000000e+00, !dbg !35
  %162 = fadd float %154, 1.000000e+00, !dbg !35
  %163 = fadd float %155, 1.000000e+00, !dbg !35
  %164 = fadd float %156, 1.000000e+00, !dbg !35
  %165 = fadd float %157, 1.000000e+00, !dbg !35
  %166 = fadd float %158, 1.000000e+00, !dbg !35
  %167 = fadd float %159, 1.000000e+00, !dbg !35
  %168 = fmul float %112, %160, !dbg !36
  %169 = fmul float %113, %161, !dbg !36
  %170 = fmul float %114, %162, !dbg !36
  %171 = fmul float %115, %163, !dbg !36
  %172 = fmul float %116, %164, !dbg !36
  %173 = fmul float %117, %165, !dbg !36
  %174 = fmul float %118, %166, !dbg !36
  %175 = fmul float %119, %167, !dbg !36
  %176 = fmul float %136, %168, !dbg !37
  %177 = fmul float %137, %169, !dbg !37
  %178 = fmul float %138, %170, !dbg !37
  %179 = fmul float %139, %171, !dbg !37
  %180 = fmul float %140, %172, !dbg !37
  %181 = fmul float %141, %173, !dbg !37
  %182 = fmul float %142, %174, !dbg !37
  %183 = fmul float %143, %175, !dbg !37
  %184 = getelementptr i16, ptr addrspace(1) %3, i64 %13, !dbg !38
  %185 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %128) #1, !dbg !39
  %186 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %129) #1, !dbg !39
  %187 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %130) #1, !dbg !39
  %188 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %131) #1, !dbg !39
  %189 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %132) #1, !dbg !39
  %190 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %133) #1, !dbg !39
  %191 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %134) #1, !dbg !39
  %192 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %135) #1, !dbg !39
  %193 = insertelement <2 x i16> poison, i16 %185, i64 0, !dbg !39
  %194 = insertelement <2 x i16> %193, i16 %186, i64 1, !dbg !39
  %195 = bitcast <2 x i16> %194 to i32, !dbg !39
  %196 = insertelement <2 x i16> poison, i16 %187, i64 0, !dbg !39
  %197 = insertelement <2 x i16> %196, i16 %188, i64 1, !dbg !39
  %198 = bitcast <2 x i16> %197 to i32, !dbg !39
  %199 = insertelement <2 x i16> poison, i16 %189, i64 0, !dbg !39
  %200 = insertelement <2 x i16> %199, i16 %190, i64 1, !dbg !39
  %201 = bitcast <2 x i16> %200 to i32, !dbg !39
  %202 = insertelement <2 x i16> poison, i16 %191, i64 0, !dbg !39
  %203 = insertelement <2 x i16> %202, i16 %192, i64 1, !dbg !39
  %204 = bitcast <2 x i16> %203 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %195, i32 %198, i32 %201, i32 %204, ptr addrspace(1) %184, i1 true) #1, !dbg !39
  %205 = getelementptr i16, ptr addrspace(1) %4, i64 %13, !dbg !40
  %206 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %176) #1, !dbg !41
  %207 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %177) #1, !dbg !41
  %208 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %178) #1, !dbg !41
  %209 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %179) #1, !dbg !41
  %210 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %180) #1, !dbg !41
  %211 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %181) #1, !dbg !41
  %212 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %182) #1, !dbg !41
  %213 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %183) #1, !dbg !41
  %214 = insertelement <2 x i16> poison, i16 %206, i64 0, !dbg !41
  %215 = insertelement <2 x i16> %214, i16 %207, i64 1, !dbg !41
  %216 = bitcast <2 x i16> %215 to i32, !dbg !41
  %217 = insertelement <2 x i16> poison, i16 %208, i64 0, !dbg !41
  %218 = insertelement <2 x i16> %217, i16 %209, i64 1, !dbg !41
  %219 = bitcast <2 x i16> %218 to i32, !dbg !41
  %220 = insertelement <2 x i16> poison, i16 %210, i64 0, !dbg !41
  %221 = insertelement <2 x i16> %220, i16 %211, i64 1, !dbg !41
  %222 = bitcast <2 x i16> %221 to i32, !dbg !41
  %223 = insertelement <2 x i16> poison, i16 %212, i64 0, !dbg !41
  %224 = insertelement <2 x i16> %223, i16 %213, i64 1, !dbg !41
  %225 = bitcast <2 x i16> %224 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %216, i32 %219, i32 %222, i32 %225, ptr addrspace(1) %205, i1 true) #1, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "colhw4bnj2cxn3nm4cch4l5wqlarckdnqp72s4ndd4yzz4s3pxfo.py", directory: "/auto/home/menuab/code/YNNtitan/torchinductor_menuab/ol")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 36, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 30, scope: !7)
!15 = !DILocation(line: 24, column: 35, scope: !7)
!16 = !DILocation(line: 24, column: 44, scope: !7)
!17 = !DILocation(line: 25, column: 30, scope: !7)
!18 = !DILocation(line: 25, column: 35, scope: !7)
!19 = !DILocation(line: 25, column: 44, scope: !7)
!20 = !DILocation(line: 26, column: 30, scope: !7)
!21 = !DILocation(line: 26, column: 35, scope: !7)
!22 = !DILocation(line: 26, column: 44, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/auto/home/menuab/miniforge3/envs/titan/lib/python3.10/site-packages/triton/language")
!26 = !DILocation(line: 28, column: 22, scope: !7)
!27 = !DILocation(line: 51, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 51, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 51, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 29, column: 18, scope: !7)
!31 = !DILocation(line: 31, column: 18, scope: !7)
!32 = !DILocation(line: 32, column: 18, scope: !7)
!33 = !DILocation(line: 35, column: 20, scope: !7)
!34 = !DILocation(line: 36, column: 19, scope: !7)
!35 = !DILocation(line: 37, column: 20, scope: !7)
!36 = !DILocation(line: 38, column: 19, scope: !7)
!37 = !DILocation(line: 39, column: 19, scope: !7)
!38 = !DILocation(line: 40, column: 25, scope: !7)
!39 = !DILocation(line: 40, column: 36, scope: !7)
!40 = !DILocation(line: 41, column: 25, scope: !7)
!41 = !DILocation(line: 41, column: 37, scope: !7)
!42 = !DILocation(line: 41, column: 4, scope: !7)
